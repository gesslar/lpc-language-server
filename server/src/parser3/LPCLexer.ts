// Generated from grammar/LPCLexer.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

 
    import {LPCLexerBase} from "./LPCLexerBase";


export class LPCLexer extends LPCLexerBase {
    public static readonly BREAK = 1;
    public static readonly BUFFER = 2;
    public static readonly BYTES = 3;
    public static readonly CASE = 4;
    public static readonly CATCH = 5;
    public static readonly CHAR = 6;
    public static readonly CLASS = 7;
    public static readonly CLOSURE = 8;
    public static readonly CONST = 9;
    public static readonly CONTINUE = 10;
    public static readonly DEFAULT = 11;
    public static readonly DO = 12;
    public static readonly ECHO = 13;
    public static readonly ELSE = 14;
    public static readonly ELIF = 15;
    public static readonly ENDIF = 16;
    public static readonly ENUM = 17;
    public static readonly FLOAT = 18;
    public static readonly FOR = 19;
    public static readonly FOREACH = 20;
    public static readonly FUNCTIONS = 21;
    public static readonly FUNCTION = 22;
    public static readonly HASH = 23;
    public static readonly IF = 24;
    public static readonly IFDEF = 25;
    public static readonly IFNDEF = 26;
    public static readonly IN = 27;
    public static readonly INCLUDE = 28;
    public static readonly INHERIT = 29;
    public static readonly INT = 30;
    public static readonly LINE = 31;
    public static readonly LWOBJECT = 32;
    public static readonly MAPPING = 33;
    public static readonly MIXED = 34;
    public static readonly NEW = 35;
    public static readonly OBJECT = 36;
    public static readonly PRAGMA = 37;
    public static readonly RETURN = 38;
    public static readonly STATUS = 39;
    public static readonly STRUCTS = 40;
    public static readonly STRUCT = 41;
    public static readonly STRING = 42;
    public static readonly SYMBOL = 43;
    public static readonly SWITCH = 44;
    public static readonly TYPEDEF = 45;
    public static readonly UNDEF = 46;
    public static readonly VARIABLES = 47;
    public static readonly VIRTUAL = 48;
    public static readonly VOID = 49;
    public static readonly VOLATILE = 50;
    public static readonly WHILE = 51;
    public static readonly DEPRECATED = 52;
    public static readonly PRIVATE = 53;
    public static readonly PROTECTED = 54;
    public static readonly PUBLIC = 55;
    public static readonly STATIC = 56;
    public static readonly VISIBLE = 57;
    public static readonly NOSHADOW = 58;
    public static readonly NOSAVE = 59;
    public static readonly NOMASK = 60;
    public static readonly VARARGS = 61;
    public static readonly SUPER_ACCESSOR = 62;
    public static readonly PLUS = 63;
    public static readonly MINUS = 64;
    public static readonly STAR = 65;
    public static readonly DIV = 66;
    public static readonly MOD = 67;
    public static readonly INC = 68;
    public static readonly DEC = 69;
    public static readonly SHL = 70;
    public static readonly SHR = 71;
    public static readonly LT = 72;
    public static readonly GT = 73;
    public static readonly LE = 74;
    public static readonly GE = 75;
    public static readonly EQ = 76;
    public static readonly NE = 77;
    public static readonly AND = 78;
    public static readonly OR = 79;
    public static readonly XOR = 80;
    public static readonly NOT = 81;
    public static readonly BNOT = 82;
    public static readonly AND_AND = 83;
    public static readonly OR_OR = 84;
    public static readonly QUESTION = 85;
    public static readonly COLON = 86;
    public static readonly SEMI = 87;
    public static readonly COMMA = 88;
    public static readonly TRIPPLEDOT = 89;
    public static readonly DOUBLEDOT = 90;
    public static readonly DOT = 91;
    public static readonly ASSIGN = 92;
    public static readonly ADD_ASSIGN = 93;
    public static readonly SUB_ASSIGN = 94;
    public static readonly MUL_ASSIGN = 95;
    public static readonly DIV_ASSIGN = 96;
    public static readonly MOD_ASSIGN = 97;
    public static readonly OR_ASSIGN = 98;
    public static readonly AND_ASSIGN = 99;
    public static readonly BITAND_ASSIGN = 100;
    public static readonly BITOR_ASSIGN = 101;
    public static readonly XOR_ASSIGN = 102;
    public static readonly SHL_ASSIGN = 103;
    public static readonly RSH_ASSIGN = 104;
    public static readonly MAPPING_OPEN = 105;
    public static readonly ARROW = 106;
    public static readonly PAREN_OPEN = 107;
    public static readonly PAREN_CLOSE = 108;
    public static readonly CURLY_OPEN = 109;
    public static readonly CURLY_CLOSE = 110;
    public static readonly SQUARE_OPEN = 111;
    public static readonly SQUARE_CLOSE = 112;
    public static readonly BACKSLASH = 113;
    public static readonly IntegerConstant = 114;
    public static readonly FloatingConstant = 115;
    public static readonly HexIntConstant = 116;
    public static readonly TextFormatDirective = 117;
    public static readonly STRING_START = 118;
    public static readonly StringLiteral = 119;
    public static readonly CharacterConstant = 120;
    public static readonly LAMBDA_IDENTIFIER = 121;
    public static readonly SINGLEQUOT = 122;
    public static readonly CloneObject = 123;
    public static readonly LoadObject = 124;
    public static readonly Identifier = 125;
    public static readonly COMMENT = 126;
    public static readonly LINE_COMMENT = 127;
    public static readonly DEFINE = 128;
    public static readonly WS = 129;
    public static readonly END_DEFINE = 130;
    public static readonly STRING_END = 131;
    public static readonly TEXT_FORMAT_END = 132;
    public static readonly NEWLINE = 133;
    public static readonly DEFINE_MODE = 1;
    public static readonly STRING_MODE = 2;
    public static readonly TEXT_FORMAT_MODE = 3;

    public static readonly channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN", "COMMENTS_CHANNEL", "DIRECTIVE_CHANNEL", 
                                           "DISABLED_CHANNEL"
    ];

    public static readonly literalNames = [
        null, "'break'", "'buffer'", "'bytes'", "'case'", "'catch'", "'char'", 
        "'class'", "'closure'", "'const'", "'continue'", "'default'", "'do'", 
        "'#echo'", "'else'", "'elif'", "'endif'", "'enum'", "'float'", "'for'", 
        "'foreach'", "'functions'", "'function'", "'#'", "'if'", "'ifdef'", 
        "'ifndef'", "'in'", "'include'", "'inherit'", "'int'", "'#line'", 
        "'lwobject'", "'mapping'", "'mixed'", "'new'", "'object'", "'pragma'", 
        "'return'", "'status'", "'structs'", "'struct'", "'string'", "'symbol'", 
        "'switch'", "'typedef'", "'undef'", "'variables'", "'virtual'", 
        "'void'", "'volatile'", "'while'", "'deprecated'", "'private'", 
        "'protected'", "'public'", "'static'", "'visible'", "'noshadow'", 
        "'nosave'", "'nomask'", "'varargs'", "'::'", "'+'", "'-'", "'*'", 
        "'/'", "'%'", "'++'", "'--'", "'<<'", "'>>'", "'<'", "'>'", "'<='", 
        "'>='", "'=='", "'!='", "'&'", "'|'", "'^'", "'!'", "'~'", "'&&'", 
        "'||'", "'?'", "':'", "';'", "','", "'...'", "'..'", "'.'", "'='", 
        "'+='", "'-='", "'*='", "'/='", "'%='", "'||='", "'&&='", "'&='", 
        "'|='", "'^='", "'<<='", "'>>='", null, "'->'", "'('", "')'", "'{'", 
        "'}'", "'['", "']'", "'\\'", null, null, null, null, null, null, 
        null, null, "'''", "'clone_object'", "'load_object'", null, null, 
        null, null, null, null, null, null, "'\\\\n'"
    ];

    public static readonly symbolicNames = [
        null, "BREAK", "BUFFER", "BYTES", "CASE", "CATCH", "CHAR", "CLASS", 
        "CLOSURE", "CONST", "CONTINUE", "DEFAULT", "DO", "ECHO", "ELSE", 
        "ELIF", "ENDIF", "ENUM", "FLOAT", "FOR", "FOREACH", "FUNCTIONS", 
        "FUNCTION", "HASH", "IF", "IFDEF", "IFNDEF", "IN", "INCLUDE", "INHERIT", 
        "INT", "LINE", "LWOBJECT", "MAPPING", "MIXED", "NEW", "OBJECT", 
        "PRAGMA", "RETURN", "STATUS", "STRUCTS", "STRUCT", "STRING", "SYMBOL", 
        "SWITCH", "TYPEDEF", "UNDEF", "VARIABLES", "VIRTUAL", "VOID", "VOLATILE", 
        "WHILE", "DEPRECATED", "PRIVATE", "PROTECTED", "PUBLIC", "STATIC", 
        "VISIBLE", "NOSHADOW", "NOSAVE", "NOMASK", "VARARGS", "SUPER_ACCESSOR", 
        "PLUS", "MINUS", "STAR", "DIV", "MOD", "INC", "DEC", "SHL", "SHR", 
        "LT", "GT", "LE", "GE", "EQ", "NE", "AND", "OR", "XOR", "NOT", "BNOT", 
        "AND_AND", "OR_OR", "QUESTION", "COLON", "SEMI", "COMMA", "TRIPPLEDOT", 
        "DOUBLEDOT", "DOT", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", 
        "DIV_ASSIGN", "MOD_ASSIGN", "OR_ASSIGN", "AND_ASSIGN", "BITAND_ASSIGN", 
        "BITOR_ASSIGN", "XOR_ASSIGN", "SHL_ASSIGN", "RSH_ASSIGN", "MAPPING_OPEN", 
        "ARROW", "PAREN_OPEN", "PAREN_CLOSE", "CURLY_OPEN", "CURLY_CLOSE", 
        "SQUARE_OPEN", "SQUARE_CLOSE", "BACKSLASH", "IntegerConstant", "FloatingConstant", 
        "HexIntConstant", "TextFormatDirective", "STRING_START", "StringLiteral", 
        "CharacterConstant", "LAMBDA_IDENTIFIER", "SINGLEQUOT", "CloneObject", 
        "LoadObject", "Identifier", "COMMENT", "LINE_COMMENT", "DEFINE", 
        "WS", "END_DEFINE", "STRING_END", "TEXT_FORMAT_END", "NEWLINE"
    ];

    public static readonly modeNames = [
        "DEFAULT_MODE", "DEFINE_MODE", "STRING_MODE", "TEXT_FORMAT_MODE",
    ];

    public static readonly ruleNames = [
        "BREAK", "BUFFER", "BYTES", "CASE", "CATCH", "CHAR", "CLASS", "CLOSURE", 
        "CONST", "CONTINUE", "DEFAULT", "DO", "ECHO", "ELSE", "ELIF", "ENDIF", 
        "ENUM", "FLOAT", "FOR", "FOREACH", "FUNCTIONS", "FUNCTION", "HASH", 
        "IF", "IFDEF", "IFNDEF", "IN", "INCLUDE", "INHERIT", "INT", "LINE", 
        "LWOBJECT", "MAPPING", "MIXED", "NEW", "OBJECT", "PRAGMA", "RETURN", 
        "STATUS", "STRUCTS", "STRUCT", "STRING", "SYMBOL", "SWITCH", "TYPEDEF", 
        "UNDEF", "VARIABLES", "VIRTUAL", "VOID", "VOLATILE", "WHILE", "DEPRECATED", 
        "PRIVATE", "PROTECTED", "PUBLIC", "STATIC", "VISIBLE", "NOSHADOW", 
        "NOSAVE", "NOMASK", "VARARGS", "SUPER_ACCESSOR", "PLUS", "MINUS", 
        "STAR", "DIV", "MOD", "INC", "DEC", "SHL", "SHR", "LT", "GT", "LE", 
        "GE", "EQ", "NE", "AND", "OR", "XOR", "NOT", "BNOT", "AND_AND", 
        "OR_OR", "QUESTION", "COLON", "SEMI", "COMMA", "TRIPPLEDOT", "DOUBLEDOT", 
        "DOT", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
        "MOD_ASSIGN", "OR_ASSIGN", "AND_ASSIGN", "BITAND_ASSIGN", "BITOR_ASSIGN", 
        "XOR_ASSIGN", "SHL_ASSIGN", "RSH_ASSIGN", "MAPPING_OPEN", "ARROW", 
        "PAREN_OPEN", "PAREN_CLOSE", "CURLY_OPEN", "CURLY_CLOSE", "SQUARE_OPEN", 
        "SQUARE_CLOSE", "BACKSLASH", "HexDigit", "IntegerConstant", "FloatingConstant", 
        "HexIntConstant", "TextFormatDirective", "STRING_START", "StringLiteral", 
        "CharacterConstant", "LAMBDA_IDENTIFIER", "SINGLEQUOT", "CloneObject", 
        "LoadObject", "Identifier", "COMMENT", "LINE_COMMENT", "DEFINE", 
        "WS", "DEFINE_CONTENT", "NEWLINE", "DEFINE_COMMENT", "DEFINE_BLOCK_COMMENT", 
        "END_DEFINE", "STRING_CONTENT", "STRING_END", "TEXT_FORMAT_CONTENT", 
        "TEXT_FORMAT_END", "TEXT_FORMAT_WS",
    ];

        
        _textMark = "";


    public constructor(input: antlr.CharStream) {
        super(input);
        this.interpreter = new antlr.LexerATNSimulator(this, LPCLexer._ATN, LPCLexer.decisionsToDFA, new antlr.PredictionContextCache());
    }

    public get grammarFileName(): string { return "LPCLexer.g4"; }

    public get literalNames(): (string | null)[] { return LPCLexer.literalNames; }
    public get symbolicNames(): (string | null)[] { return LPCLexer.symbolicNames; }
    public get ruleNames(): string[] { return LPCLexer.ruleNames; }

    public get serializedATN(): number[] { return LPCLexer._serializedATN; }

    public get channelNames(): string[] { return LPCLexer.channelNames; }

    public get modeNames(): string[] { return LPCLexer.modeNames; }

    public override action(localContext: antlr.ParserRuleContext | null, ruleIndex: number, actionIndex: number): void {
        switch (ruleIndex) {
        case 117:
            this.TextFormatDirective_action(localContext, actionIndex);
            break;
        }
    }
    private TextFormatDirective_action(localContext: antlr.ParserRuleContext | null, actionIndex: number): void {
        switch (actionIndex) {
        case 0:
             this._textMark = this.text.substring(this.text.startsWith("@@") ? 2 : 1); 
            break;
        }
    }
    public override sempred(localContext: antlr.ParserRuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 6:
            return this.CLASS_sempred(localContext, predIndex);
        case 34:
            return this.NEW_sempred(localContext, predIndex);
        case 38:
            return this.STATUS_sempred(localContext, predIndex);
        case 117:
            return this.TextFormatDirective_sempred(localContext, predIndex);
        case 137:
            return this.TEXT_FORMAT_CONTENT_sempred(localContext, predIndex);
        case 138:
            return this.TEXT_FORMAT_END_sempred(localContext, predIndex);
        }
        return true;
    }
    private CLASS_sempred(localContext: antlr.ParserRuleContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return  this.isFluff() ;
        }
        return true;
    }
    private NEW_sempred(localContext: antlr.ParserRuleContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 1:
            return  this.isFluff() ;
        }
        return true;
    }
    private STATUS_sempred(localContext: antlr.ParserRuleContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 2:
            return  this.isLD() ;
        }
        return true;
    }
    private TextFormatDirective_sempred(localContext: antlr.ParserRuleContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 3:
            return  this.isFluff() ;
        }
        return true;
    }
    private TEXT_FORMAT_CONTENT_sempred(localContext: antlr.ParserRuleContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 4:
            return  this.text.trim() != this._textMark ;
        }
        return true;
    }
    private TEXT_FORMAT_END_sempred(localContext: antlr.ParserRuleContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 5:
            return  this.text.trim() == this._textMark ;
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,0,133,1141,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,
        2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,
        11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,
        18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,
        24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
        31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,
        37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,
        44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,
        50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,
        57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
        63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,
        70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,
        76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,
        83,7,83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,
        89,2,90,7,90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,
        96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,
        102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,
        7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,2,112,7,112,
        2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,2,118,
        7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
        2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,
        7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
        2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,1,0,
        1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,
        1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,
        1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,
        1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
        1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,
        1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,
        1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,
        1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,
        1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,
        1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,
        1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,
        1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,
        1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
        1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,
        1,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,
        1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,59,
        1,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
        1,60,1,61,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,
        1,66,1,67,1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,69,1,70,1,70,1,70,
        1,71,1,71,1,72,1,72,1,73,1,73,1,73,1,74,1,74,1,74,1,75,1,75,1,75,
        1,76,1,76,1,76,1,77,1,77,1,78,1,78,1,79,1,79,1,80,1,80,1,81,1,81,
        1,82,1,82,1,82,1,83,1,83,1,83,1,84,1,84,1,85,1,85,1,86,1,86,1,87,
        1,87,1,88,1,88,1,88,1,88,1,89,1,89,1,89,1,90,1,90,1,91,1,91,1,92,
        1,92,1,92,1,93,1,93,1,93,1,94,1,94,1,94,1,95,1,95,1,95,1,96,1,96,
        1,96,1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,1,99,1,99,1,99,1,100,
        1,100,1,100,1,101,1,101,1,101,1,102,1,102,1,102,1,102,1,103,1,103,
        1,103,1,103,1,104,1,104,5,104,820,8,104,10,104,12,104,823,9,104,
        1,104,1,104,1,105,1,105,1,105,1,106,1,106,1,107,1,107,1,108,1,108,
        1,109,1,109,1,110,1,110,1,111,1,111,1,112,1,112,1,113,3,113,845,
        8,113,1,114,1,114,3,114,849,8,114,1,114,5,114,852,8,114,10,114,12,
        114,855,9,114,1,115,5,115,858,8,115,10,115,12,115,861,9,115,1,115,
        1,115,4,115,865,8,115,11,115,12,115,866,1,115,1,115,3,115,871,8,
        115,1,115,4,115,874,8,115,11,115,12,115,875,3,115,878,8,115,1,116,
        1,116,1,116,4,116,883,8,116,11,116,12,116,884,1,117,1,117,3,117,
        889,8,117,1,117,1,117,5,117,893,8,117,10,117,12,117,896,9,117,1,
        117,1,117,1,117,1,117,1,117,1,118,1,118,1,118,1,118,1,119,3,119,
        908,8,119,1,119,1,119,5,119,912,8,119,10,119,12,119,915,9,119,1,
        119,1,119,1,120,1,120,1,120,1,120,3,120,923,8,120,1,120,1,120,1,
        121,1,121,1,121,5,121,930,8,121,10,121,12,121,933,9,121,1,121,1,
        121,1,121,1,121,1,121,5,121,940,8,121,10,121,12,121,943,9,121,3,
        121,945,8,121,1,122,1,122,1,123,1,123,1,123,1,123,1,123,1,123,1,
        123,1,123,1,123,1,123,1,123,1,123,1,123,1,124,1,124,1,124,1,124,
        1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,125,1,125,5,125,
        976,8,125,10,125,12,125,979,9,125,1,126,1,126,1,126,1,126,5,126,
        985,8,126,10,126,12,126,988,9,126,1,126,1,126,1,126,1,126,1,126,
        1,127,1,127,1,127,1,127,5,127,999,8,127,10,127,12,127,1002,9,127,
        1,127,3,127,1005,8,127,1,127,1,127,1,128,1,128,5,128,1011,8,128,
        10,128,12,128,1014,9,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,
        1,128,1,128,1,129,4,129,1026,8,129,11,129,12,129,1027,1,129,1,129,
        1,130,4,130,1033,8,130,11,130,12,130,1034,1,130,1,130,1,130,1,130,
        3,130,1041,8,130,1,130,1,130,3,130,1045,8,130,1,130,1,130,1,131,
        1,131,1,131,1,131,1,131,1,132,1,132,1,132,1,132,4,132,1058,8,132,
        11,132,12,132,1059,1,132,1,132,1,133,1,133,1,133,1,133,1,133,1,133,
        4,133,1070,8,133,11,133,12,133,1071,1,133,4,133,1075,8,133,11,133,
        12,133,1076,1,133,1,133,1,133,1,133,1,134,3,134,1084,8,134,1,134,
        1,134,1,135,1,135,1,135,1,135,3,135,1092,8,135,1,135,1,135,1,136,
        1,136,1,136,1,136,1,137,4,137,1101,8,137,11,137,12,137,1102,1,137,
        1,137,1,137,1,137,1,138,4,138,1110,8,138,11,138,12,138,1111,1,138,
        5,138,1115,8,138,10,138,12,138,1118,9,138,1,138,1,138,5,138,1122,
        8,138,10,138,12,138,1125,9,138,4,138,1127,8,138,11,138,12,138,1128,
        1,138,1,138,1,138,1,138,1,139,4,139,1136,8,139,11,139,12,139,1137,
        1,139,1,139,3,986,1000,1071,0,140,4,1,6,2,8,3,10,4,12,5,14,6,16,
        7,18,8,20,9,22,10,24,11,26,12,28,13,30,14,32,15,34,16,36,17,38,18,
        40,19,42,20,44,21,46,22,48,23,50,24,52,25,54,26,56,27,58,28,60,29,
        62,30,64,31,66,32,68,33,70,34,72,35,74,36,76,37,78,38,80,39,82,40,
        84,41,86,42,88,43,90,44,92,45,94,46,96,47,98,48,100,49,102,50,104,
        51,106,52,108,53,110,54,112,55,114,56,116,57,118,58,120,59,122,60,
        124,61,126,62,128,63,130,64,132,65,134,66,136,67,138,68,140,69,142,
        70,144,71,146,72,148,73,150,74,152,75,154,76,156,77,158,78,160,79,
        162,80,164,81,166,82,168,83,170,84,172,85,174,86,176,87,178,88,180,
        89,182,90,184,91,186,92,188,93,190,94,192,95,194,96,196,97,198,98,
        200,99,202,100,204,101,206,102,208,103,210,104,212,105,214,106,216,
        107,218,108,220,109,222,110,224,111,226,112,228,113,230,0,232,114,
        234,115,236,116,238,117,240,118,242,119,244,120,246,121,248,122,
        250,123,252,124,254,125,256,126,258,127,260,128,262,129,264,0,266,
        133,268,0,270,0,272,130,274,0,276,131,278,0,280,132,282,0,4,0,1,
        2,3,18,3,0,9,10,13,13,32,32,3,0,48,57,65,70,97,102,1,0,48,57,2,0,
        69,69,101,101,2,0,43,43,45,45,2,0,88,88,120,120,4,0,36,36,65,90,
        95,95,97,122,4,0,48,57,65,90,95,95,97,122,4,0,10,10,13,13,39,39,
        92,92,1,1,10,10,2,0,9,9,32,32,3,0,10,10,47,47,92,92,1,0,10,10,2,
        0,42,42,47,47,1,0,42,42,1,0,47,47,3,0,10,10,34,34,92,92,2,0,10,10,
        13,13,1174,0,4,1,0,0,0,0,6,1,0,0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,
        1,0,0,0,0,14,1,0,0,0,0,16,1,0,0,0,0,18,1,0,0,0,0,20,1,0,0,0,0,22,
        1,0,0,0,0,24,1,0,0,0,0,26,1,0,0,0,0,28,1,0,0,0,0,30,1,0,0,0,0,32,
        1,0,0,0,0,34,1,0,0,0,0,36,1,0,0,0,0,38,1,0,0,0,0,40,1,0,0,0,0,42,
        1,0,0,0,0,44,1,0,0,0,0,46,1,0,0,0,0,48,1,0,0,0,0,50,1,0,0,0,0,52,
        1,0,0,0,0,54,1,0,0,0,0,56,1,0,0,0,0,58,1,0,0,0,0,60,1,0,0,0,0,62,
        1,0,0,0,0,64,1,0,0,0,0,66,1,0,0,0,0,68,1,0,0,0,0,70,1,0,0,0,0,72,
        1,0,0,0,0,74,1,0,0,0,0,76,1,0,0,0,0,78,1,0,0,0,0,80,1,0,0,0,0,82,
        1,0,0,0,0,84,1,0,0,0,0,86,1,0,0,0,0,88,1,0,0,0,0,90,1,0,0,0,0,92,
        1,0,0,0,0,94,1,0,0,0,0,96,1,0,0,0,0,98,1,0,0,0,0,100,1,0,0,0,0,102,
        1,0,0,0,0,104,1,0,0,0,0,106,1,0,0,0,0,108,1,0,0,0,0,110,1,0,0,0,
        0,112,1,0,0,0,0,114,1,0,0,0,0,116,1,0,0,0,0,118,1,0,0,0,0,120,1,
        0,0,0,0,122,1,0,0,0,0,124,1,0,0,0,0,126,1,0,0,0,0,128,1,0,0,0,0,
        130,1,0,0,0,0,132,1,0,0,0,0,134,1,0,0,0,0,136,1,0,0,0,0,138,1,0,
        0,0,0,140,1,0,0,0,0,142,1,0,0,0,0,144,1,0,0,0,0,146,1,0,0,0,0,148,
        1,0,0,0,0,150,1,0,0,0,0,152,1,0,0,0,0,154,1,0,0,0,0,156,1,0,0,0,
        0,158,1,0,0,0,0,160,1,0,0,0,0,162,1,0,0,0,0,164,1,0,0,0,0,166,1,
        0,0,0,0,168,1,0,0,0,0,170,1,0,0,0,0,172,1,0,0,0,0,174,1,0,0,0,0,
        176,1,0,0,0,0,178,1,0,0,0,0,180,1,0,0,0,0,182,1,0,0,0,0,184,1,0,
        0,0,0,186,1,0,0,0,0,188,1,0,0,0,0,190,1,0,0,0,0,192,1,0,0,0,0,194,
        1,0,0,0,0,196,1,0,0,0,0,198,1,0,0,0,0,200,1,0,0,0,0,202,1,0,0,0,
        0,204,1,0,0,0,0,206,1,0,0,0,0,208,1,0,0,0,0,210,1,0,0,0,0,212,1,
        0,0,0,0,214,1,0,0,0,0,216,1,0,0,0,0,218,1,0,0,0,0,220,1,0,0,0,0,
        222,1,0,0,0,0,224,1,0,0,0,0,226,1,0,0,0,0,228,1,0,0,0,0,232,1,0,
        0,0,0,234,1,0,0,0,0,236,1,0,0,0,0,238,1,0,0,0,0,240,1,0,0,0,0,242,
        1,0,0,0,0,244,1,0,0,0,0,246,1,0,0,0,0,248,1,0,0,0,0,250,1,0,0,0,
        0,252,1,0,0,0,0,254,1,0,0,0,0,256,1,0,0,0,0,258,1,0,0,0,0,260,1,
        0,0,0,0,262,1,0,0,0,1,264,1,0,0,0,1,266,1,0,0,0,1,268,1,0,0,0,1,
        270,1,0,0,0,1,272,1,0,0,0,2,274,1,0,0,0,2,276,1,0,0,0,3,278,1,0,
        0,0,3,280,1,0,0,0,3,282,1,0,0,0,4,284,1,0,0,0,6,290,1,0,0,0,8,297,
        1,0,0,0,10,303,1,0,0,0,12,308,1,0,0,0,14,314,1,0,0,0,16,319,1,0,
        0,0,18,327,1,0,0,0,20,335,1,0,0,0,22,341,1,0,0,0,24,350,1,0,0,0,
        26,358,1,0,0,0,28,361,1,0,0,0,30,367,1,0,0,0,32,372,1,0,0,0,34,377,
        1,0,0,0,36,383,1,0,0,0,38,388,1,0,0,0,40,394,1,0,0,0,42,398,1,0,
        0,0,44,406,1,0,0,0,46,416,1,0,0,0,48,425,1,0,0,0,50,427,1,0,0,0,
        52,430,1,0,0,0,54,436,1,0,0,0,56,443,1,0,0,0,58,446,1,0,0,0,60,454,
        1,0,0,0,62,462,1,0,0,0,64,466,1,0,0,0,66,472,1,0,0,0,68,481,1,0,
        0,0,70,489,1,0,0,0,72,495,1,0,0,0,74,501,1,0,0,0,76,508,1,0,0,0,
        78,515,1,0,0,0,80,522,1,0,0,0,82,531,1,0,0,0,84,539,1,0,0,0,86,546,
        1,0,0,0,88,553,1,0,0,0,90,560,1,0,0,0,92,567,1,0,0,0,94,575,1,0,
        0,0,96,581,1,0,0,0,98,591,1,0,0,0,100,599,1,0,0,0,102,604,1,0,0,
        0,104,613,1,0,0,0,106,619,1,0,0,0,108,630,1,0,0,0,110,638,1,0,0,
        0,112,648,1,0,0,0,114,655,1,0,0,0,116,662,1,0,0,0,118,670,1,0,0,
        0,120,679,1,0,0,0,122,686,1,0,0,0,124,693,1,0,0,0,126,701,1,0,0,
        0,128,704,1,0,0,0,130,706,1,0,0,0,132,708,1,0,0,0,134,710,1,0,0,
        0,136,712,1,0,0,0,138,714,1,0,0,0,140,717,1,0,0,0,142,720,1,0,0,
        0,144,723,1,0,0,0,146,726,1,0,0,0,148,728,1,0,0,0,150,730,1,0,0,
        0,152,733,1,0,0,0,154,736,1,0,0,0,156,739,1,0,0,0,158,742,1,0,0,
        0,160,744,1,0,0,0,162,746,1,0,0,0,164,748,1,0,0,0,166,750,1,0,0,
        0,168,752,1,0,0,0,170,755,1,0,0,0,172,758,1,0,0,0,174,760,1,0,0,
        0,176,762,1,0,0,0,178,764,1,0,0,0,180,766,1,0,0,0,182,770,1,0,0,
        0,184,773,1,0,0,0,186,775,1,0,0,0,188,777,1,0,0,0,190,780,1,0,0,
        0,192,783,1,0,0,0,194,786,1,0,0,0,196,789,1,0,0,0,198,792,1,0,0,
        0,200,796,1,0,0,0,202,800,1,0,0,0,204,803,1,0,0,0,206,806,1,0,0,
        0,208,809,1,0,0,0,210,813,1,0,0,0,212,817,1,0,0,0,214,826,1,0,0,
        0,216,829,1,0,0,0,218,831,1,0,0,0,220,833,1,0,0,0,222,835,1,0,0,
        0,224,837,1,0,0,0,226,839,1,0,0,0,228,841,1,0,0,0,230,844,1,0,0,
        0,232,846,1,0,0,0,234,859,1,0,0,0,236,879,1,0,0,0,238,886,1,0,0,
        0,240,902,1,0,0,0,242,907,1,0,0,0,244,918,1,0,0,0,246,926,1,0,0,
        0,248,946,1,0,0,0,250,948,1,0,0,0,252,961,1,0,0,0,254,973,1,0,0,
        0,256,980,1,0,0,0,258,994,1,0,0,0,260,1008,1,0,0,0,262,1025,1,0,
        0,0,264,1040,1,0,0,0,266,1048,1,0,0,0,268,1053,1,0,0,0,270,1063,
        1,0,0,0,272,1083,1,0,0,0,274,1091,1,0,0,0,276,1095,1,0,0,0,278,1100,
        1,0,0,0,280,1109,1,0,0,0,282,1135,1,0,0,0,284,285,5,98,0,0,285,286,
        5,114,0,0,286,287,5,101,0,0,287,288,5,97,0,0,288,289,5,107,0,0,289,
        5,1,0,0,0,290,291,5,98,0,0,291,292,5,117,0,0,292,293,5,102,0,0,293,
        294,5,102,0,0,294,295,5,101,0,0,295,296,5,114,0,0,296,7,1,0,0,0,
        297,298,5,98,0,0,298,299,5,121,0,0,299,300,5,116,0,0,300,301,5,101,
        0,0,301,302,5,115,0,0,302,9,1,0,0,0,303,304,5,99,0,0,304,305,5,97,
        0,0,305,306,5,115,0,0,306,307,5,101,0,0,307,11,1,0,0,0,308,309,5,
        99,0,0,309,310,5,97,0,0,310,311,5,116,0,0,311,312,5,99,0,0,312,313,
        5,104,0,0,313,13,1,0,0,0,314,315,5,99,0,0,315,316,5,104,0,0,316,
        317,5,97,0,0,317,318,5,114,0,0,318,15,1,0,0,0,319,320,5,99,0,0,320,
        321,5,108,0,0,321,322,5,97,0,0,322,323,5,115,0,0,323,324,5,115,0,
        0,324,325,1,0,0,0,325,326,4,6,0,0,326,17,1,0,0,0,327,328,5,99,0,
        0,328,329,5,108,0,0,329,330,5,111,0,0,330,331,5,115,0,0,331,332,
        5,117,0,0,332,333,5,114,0,0,333,334,5,101,0,0,334,19,1,0,0,0,335,
        336,5,99,0,0,336,337,5,111,0,0,337,338,5,110,0,0,338,339,5,115,0,
        0,339,340,5,116,0,0,340,21,1,0,0,0,341,342,5,99,0,0,342,343,5,111,
        0,0,343,344,5,110,0,0,344,345,5,116,0,0,345,346,5,105,0,0,346,347,
        5,110,0,0,347,348,5,117,0,0,348,349,5,101,0,0,349,23,1,0,0,0,350,
        351,5,100,0,0,351,352,5,101,0,0,352,353,5,102,0,0,353,354,5,97,0,
        0,354,355,5,117,0,0,355,356,5,108,0,0,356,357,5,116,0,0,357,25,1,
        0,0,0,358,359,5,100,0,0,359,360,5,111,0,0,360,27,1,0,0,0,361,362,
        5,35,0,0,362,363,5,101,0,0,363,364,5,99,0,0,364,365,5,104,0,0,365,
        366,5,111,0,0,366,29,1,0,0,0,367,368,5,101,0,0,368,369,5,108,0,0,
        369,370,5,115,0,0,370,371,5,101,0,0,371,31,1,0,0,0,372,373,5,101,
        0,0,373,374,5,108,0,0,374,375,5,105,0,0,375,376,5,102,0,0,376,33,
        1,0,0,0,377,378,5,101,0,0,378,379,5,110,0,0,379,380,5,100,0,0,380,
        381,5,105,0,0,381,382,5,102,0,0,382,35,1,0,0,0,383,384,5,101,0,0,
        384,385,5,110,0,0,385,386,5,117,0,0,386,387,5,109,0,0,387,37,1,0,
        0,0,388,389,5,102,0,0,389,390,5,108,0,0,390,391,5,111,0,0,391,392,
        5,97,0,0,392,393,5,116,0,0,393,39,1,0,0,0,394,395,5,102,0,0,395,
        396,5,111,0,0,396,397,5,114,0,0,397,41,1,0,0,0,398,399,5,102,0,0,
        399,400,5,111,0,0,400,401,5,114,0,0,401,402,5,101,0,0,402,403,5,
        97,0,0,403,404,5,99,0,0,404,405,5,104,0,0,405,43,1,0,0,0,406,407,
        5,102,0,0,407,408,5,117,0,0,408,409,5,110,0,0,409,410,5,99,0,0,410,
        411,5,116,0,0,411,412,5,105,0,0,412,413,5,111,0,0,413,414,5,110,
        0,0,414,415,5,115,0,0,415,45,1,0,0,0,416,417,5,102,0,0,417,418,5,
        117,0,0,418,419,5,110,0,0,419,420,5,99,0,0,420,421,5,116,0,0,421,
        422,5,105,0,0,422,423,5,111,0,0,423,424,5,110,0,0,424,47,1,0,0,0,
        425,426,5,35,0,0,426,49,1,0,0,0,427,428,5,105,0,0,428,429,5,102,
        0,0,429,51,1,0,0,0,430,431,5,105,0,0,431,432,5,102,0,0,432,433,5,
        100,0,0,433,434,5,101,0,0,434,435,5,102,0,0,435,53,1,0,0,0,436,437,
        5,105,0,0,437,438,5,102,0,0,438,439,5,110,0,0,439,440,5,100,0,0,
        440,441,5,101,0,0,441,442,5,102,0,0,442,55,1,0,0,0,443,444,5,105,
        0,0,444,445,5,110,0,0,445,57,1,0,0,0,446,447,5,105,0,0,447,448,5,
        110,0,0,448,449,5,99,0,0,449,450,5,108,0,0,450,451,5,117,0,0,451,
        452,5,100,0,0,452,453,5,101,0,0,453,59,1,0,0,0,454,455,5,105,0,0,
        455,456,5,110,0,0,456,457,5,104,0,0,457,458,5,101,0,0,458,459,5,
        114,0,0,459,460,5,105,0,0,460,461,5,116,0,0,461,61,1,0,0,0,462,463,
        5,105,0,0,463,464,5,110,0,0,464,465,5,116,0,0,465,63,1,0,0,0,466,
        467,5,35,0,0,467,468,5,108,0,0,468,469,5,105,0,0,469,470,5,110,0,
        0,470,471,5,101,0,0,471,65,1,0,0,0,472,473,5,108,0,0,473,474,5,119,
        0,0,474,475,5,111,0,0,475,476,5,98,0,0,476,477,5,106,0,0,477,478,
        5,101,0,0,478,479,5,99,0,0,479,480,5,116,0,0,480,67,1,0,0,0,481,
        482,5,109,0,0,482,483,5,97,0,0,483,484,5,112,0,0,484,485,5,112,0,
        0,485,486,5,105,0,0,486,487,5,110,0,0,487,488,5,103,0,0,488,69,1,
        0,0,0,489,490,5,109,0,0,490,491,5,105,0,0,491,492,5,120,0,0,492,
        493,5,101,0,0,493,494,5,100,0,0,494,71,1,0,0,0,495,496,5,110,0,0,
        496,497,5,101,0,0,497,498,5,119,0,0,498,499,1,0,0,0,499,500,4,34,
        1,0,500,73,1,0,0,0,501,502,5,111,0,0,502,503,5,98,0,0,503,504,5,
        106,0,0,504,505,5,101,0,0,505,506,5,99,0,0,506,507,5,116,0,0,507,
        75,1,0,0,0,508,509,5,112,0,0,509,510,5,114,0,0,510,511,5,97,0,0,
        511,512,5,103,0,0,512,513,5,109,0,0,513,514,5,97,0,0,514,77,1,0,
        0,0,515,516,5,114,0,0,516,517,5,101,0,0,517,518,5,116,0,0,518,519,
        5,117,0,0,519,520,5,114,0,0,520,521,5,110,0,0,521,79,1,0,0,0,522,
        523,5,115,0,0,523,524,5,116,0,0,524,525,5,97,0,0,525,526,5,116,0,
        0,526,527,5,117,0,0,527,528,5,115,0,0,528,529,1,0,0,0,529,530,4,
        38,2,0,530,81,1,0,0,0,531,532,5,115,0,0,532,533,5,116,0,0,533,534,
        5,114,0,0,534,535,5,117,0,0,535,536,5,99,0,0,536,537,5,116,0,0,537,
        538,5,115,0,0,538,83,1,0,0,0,539,540,5,115,0,0,540,541,5,116,0,0,
        541,542,5,114,0,0,542,543,5,117,0,0,543,544,5,99,0,0,544,545,5,116,
        0,0,545,85,1,0,0,0,546,547,5,115,0,0,547,548,5,116,0,0,548,549,5,
        114,0,0,549,550,5,105,0,0,550,551,5,110,0,0,551,552,5,103,0,0,552,
        87,1,0,0,0,553,554,5,115,0,0,554,555,5,121,0,0,555,556,5,109,0,0,
        556,557,5,98,0,0,557,558,5,111,0,0,558,559,5,108,0,0,559,89,1,0,
        0,0,560,561,5,115,0,0,561,562,5,119,0,0,562,563,5,105,0,0,563,564,
        5,116,0,0,564,565,5,99,0,0,565,566,5,104,0,0,566,91,1,0,0,0,567,
        568,5,116,0,0,568,569,5,121,0,0,569,570,5,112,0,0,570,571,5,101,
        0,0,571,572,5,100,0,0,572,573,5,101,0,0,573,574,5,102,0,0,574,93,
        1,0,0,0,575,576,5,117,0,0,576,577,5,110,0,0,577,578,5,100,0,0,578,
        579,5,101,0,0,579,580,5,102,0,0,580,95,1,0,0,0,581,582,5,118,0,0,
        582,583,5,97,0,0,583,584,5,114,0,0,584,585,5,105,0,0,585,586,5,97,
        0,0,586,587,5,98,0,0,587,588,5,108,0,0,588,589,5,101,0,0,589,590,
        5,115,0,0,590,97,1,0,0,0,591,592,5,118,0,0,592,593,5,105,0,0,593,
        594,5,114,0,0,594,595,5,116,0,0,595,596,5,117,0,0,596,597,5,97,0,
        0,597,598,5,108,0,0,598,99,1,0,0,0,599,600,5,118,0,0,600,601,5,111,
        0,0,601,602,5,105,0,0,602,603,5,100,0,0,603,101,1,0,0,0,604,605,
        5,118,0,0,605,606,5,111,0,0,606,607,5,108,0,0,607,608,5,97,0,0,608,
        609,5,116,0,0,609,610,5,105,0,0,610,611,5,108,0,0,611,612,5,101,
        0,0,612,103,1,0,0,0,613,614,5,119,0,0,614,615,5,104,0,0,615,616,
        5,105,0,0,616,617,5,108,0,0,617,618,5,101,0,0,618,105,1,0,0,0,619,
        620,5,100,0,0,620,621,5,101,0,0,621,622,5,112,0,0,622,623,5,114,
        0,0,623,624,5,101,0,0,624,625,5,99,0,0,625,626,5,97,0,0,626,627,
        5,116,0,0,627,628,5,101,0,0,628,629,5,100,0,0,629,107,1,0,0,0,630,
        631,5,112,0,0,631,632,5,114,0,0,632,633,5,105,0,0,633,634,5,118,
        0,0,634,635,5,97,0,0,635,636,5,116,0,0,636,637,5,101,0,0,637,109,
        1,0,0,0,638,639,5,112,0,0,639,640,5,114,0,0,640,641,5,111,0,0,641,
        642,5,116,0,0,642,643,5,101,0,0,643,644,5,99,0,0,644,645,5,116,0,
        0,645,646,5,101,0,0,646,647,5,100,0,0,647,111,1,0,0,0,648,649,5,
        112,0,0,649,650,5,117,0,0,650,651,5,98,0,0,651,652,5,108,0,0,652,
        653,5,105,0,0,653,654,5,99,0,0,654,113,1,0,0,0,655,656,5,115,0,0,
        656,657,5,116,0,0,657,658,5,97,0,0,658,659,5,116,0,0,659,660,5,105,
        0,0,660,661,5,99,0,0,661,115,1,0,0,0,662,663,5,118,0,0,663,664,5,
        105,0,0,664,665,5,115,0,0,665,666,5,105,0,0,666,667,5,98,0,0,667,
        668,5,108,0,0,668,669,5,101,0,0,669,117,1,0,0,0,670,671,5,110,0,
        0,671,672,5,111,0,0,672,673,5,115,0,0,673,674,5,104,0,0,674,675,
        5,97,0,0,675,676,5,100,0,0,676,677,5,111,0,0,677,678,5,119,0,0,678,
        119,1,0,0,0,679,680,5,110,0,0,680,681,5,111,0,0,681,682,5,115,0,
        0,682,683,5,97,0,0,683,684,5,118,0,0,684,685,5,101,0,0,685,121,1,
        0,0,0,686,687,5,110,0,0,687,688,5,111,0,0,688,689,5,109,0,0,689,
        690,5,97,0,0,690,691,5,115,0,0,691,692,5,107,0,0,692,123,1,0,0,0,
        693,694,5,118,0,0,694,695,5,97,0,0,695,696,5,114,0,0,696,697,5,97,
        0,0,697,698,5,114,0,0,698,699,5,103,0,0,699,700,5,115,0,0,700,125,
        1,0,0,0,701,702,5,58,0,0,702,703,5,58,0,0,703,127,1,0,0,0,704,705,
        5,43,0,0,705,129,1,0,0,0,706,707,5,45,0,0,707,131,1,0,0,0,708,709,
        5,42,0,0,709,133,1,0,0,0,710,711,5,47,0,0,711,135,1,0,0,0,712,713,
        5,37,0,0,713,137,1,0,0,0,714,715,5,43,0,0,715,716,5,43,0,0,716,139,
        1,0,0,0,717,718,5,45,0,0,718,719,5,45,0,0,719,141,1,0,0,0,720,721,
        5,60,0,0,721,722,5,60,0,0,722,143,1,0,0,0,723,724,5,62,0,0,724,725,
        5,62,0,0,725,145,1,0,0,0,726,727,5,60,0,0,727,147,1,0,0,0,728,729,
        5,62,0,0,729,149,1,0,0,0,730,731,5,60,0,0,731,732,5,61,0,0,732,151,
        1,0,0,0,733,734,5,62,0,0,734,735,5,61,0,0,735,153,1,0,0,0,736,737,
        5,61,0,0,737,738,5,61,0,0,738,155,1,0,0,0,739,740,5,33,0,0,740,741,
        5,61,0,0,741,157,1,0,0,0,742,743,5,38,0,0,743,159,1,0,0,0,744,745,
        5,124,0,0,745,161,1,0,0,0,746,747,5,94,0,0,747,163,1,0,0,0,748,749,
        5,33,0,0,749,165,1,0,0,0,750,751,5,126,0,0,751,167,1,0,0,0,752,753,
        5,38,0,0,753,754,5,38,0,0,754,169,1,0,0,0,755,756,5,124,0,0,756,
        757,5,124,0,0,757,171,1,0,0,0,758,759,5,63,0,0,759,173,1,0,0,0,760,
        761,5,58,0,0,761,175,1,0,0,0,762,763,5,59,0,0,763,177,1,0,0,0,764,
        765,5,44,0,0,765,179,1,0,0,0,766,767,5,46,0,0,767,768,5,46,0,0,768,
        769,5,46,0,0,769,181,1,0,0,0,770,771,5,46,0,0,771,772,5,46,0,0,772,
        183,1,0,0,0,773,774,5,46,0,0,774,185,1,0,0,0,775,776,5,61,0,0,776,
        187,1,0,0,0,777,778,5,43,0,0,778,779,5,61,0,0,779,189,1,0,0,0,780,
        781,5,45,0,0,781,782,5,61,0,0,782,191,1,0,0,0,783,784,5,42,0,0,784,
        785,5,61,0,0,785,193,1,0,0,0,786,787,5,47,0,0,787,788,5,61,0,0,788,
        195,1,0,0,0,789,790,5,37,0,0,790,791,5,61,0,0,791,197,1,0,0,0,792,
        793,5,124,0,0,793,794,5,124,0,0,794,795,5,61,0,0,795,199,1,0,0,0,
        796,797,5,38,0,0,797,798,5,38,0,0,798,799,5,61,0,0,799,201,1,0,0,
        0,800,801,5,38,0,0,801,802,5,61,0,0,802,203,1,0,0,0,803,804,5,124,
        0,0,804,805,5,61,0,0,805,205,1,0,0,0,806,807,5,94,0,0,807,808,5,
        61,0,0,808,207,1,0,0,0,809,810,5,60,0,0,810,811,5,60,0,0,811,812,
        5,61,0,0,812,209,1,0,0,0,813,814,5,62,0,0,814,815,5,62,0,0,815,816,
        5,61,0,0,816,211,1,0,0,0,817,821,5,40,0,0,818,820,7,0,0,0,819,818,
        1,0,0,0,820,823,1,0,0,0,821,819,1,0,0,0,821,822,1,0,0,0,822,824,
        1,0,0,0,823,821,1,0,0,0,824,825,5,91,0,0,825,213,1,0,0,0,826,827,
        5,45,0,0,827,828,5,62,0,0,828,215,1,0,0,0,829,830,5,40,0,0,830,217,
        1,0,0,0,831,832,5,41,0,0,832,219,1,0,0,0,833,834,5,123,0,0,834,221,
        1,0,0,0,835,836,5,125,0,0,836,223,1,0,0,0,837,838,5,91,0,0,838,225,
        1,0,0,0,839,840,5,93,0,0,840,227,1,0,0,0,841,842,5,92,0,0,842,229,
        1,0,0,0,843,845,7,1,0,0,844,843,1,0,0,0,845,231,1,0,0,0,846,853,
        7,2,0,0,847,849,5,95,0,0,848,847,1,0,0,0,848,849,1,0,0,0,849,850,
        1,0,0,0,850,852,7,2,0,0,851,848,1,0,0,0,852,855,1,0,0,0,853,851,
        1,0,0,0,853,854,1,0,0,0,854,233,1,0,0,0,855,853,1,0,0,0,856,858,
        7,2,0,0,857,856,1,0,0,0,858,861,1,0,0,0,859,857,1,0,0,0,859,860,
        1,0,0,0,860,862,1,0,0,0,861,859,1,0,0,0,862,864,5,46,0,0,863,865,
        7,2,0,0,864,863,1,0,0,0,865,866,1,0,0,0,866,864,1,0,0,0,866,867,
        1,0,0,0,867,877,1,0,0,0,868,870,7,3,0,0,869,871,7,4,0,0,870,869,
        1,0,0,0,870,871,1,0,0,0,871,873,1,0,0,0,872,874,7,2,0,0,873,872,
        1,0,0,0,874,875,1,0,0,0,875,873,1,0,0,0,875,876,1,0,0,0,876,878,
        1,0,0,0,877,868,1,0,0,0,877,878,1,0,0,0,878,235,1,0,0,0,879,880,
        5,48,0,0,880,882,7,5,0,0,881,883,3,230,113,0,882,881,1,0,0,0,883,
        884,1,0,0,0,884,882,1,0,0,0,884,885,1,0,0,0,885,237,1,0,0,0,886,
        888,5,64,0,0,887,889,5,64,0,0,888,887,1,0,0,0,888,889,1,0,0,0,889,
        890,1,0,0,0,890,894,7,6,0,0,891,893,7,7,0,0,892,891,1,0,0,0,893,
        896,1,0,0,0,894,892,1,0,0,0,894,895,1,0,0,0,895,897,1,0,0,0,896,
        894,1,0,0,0,897,898,6,117,0,0,898,899,4,117,3,0,899,900,1,0,0,0,
        900,901,6,117,1,0,901,239,1,0,0,0,902,903,5,34,0,0,903,904,1,0,0,
        0,904,905,6,118,2,0,905,241,1,0,0,0,906,908,5,98,0,0,907,906,1,0,
        0,0,907,908,1,0,0,0,908,909,1,0,0,0,909,913,3,240,118,0,910,912,
        3,274,135,0,911,910,1,0,0,0,912,915,1,0,0,0,913,911,1,0,0,0,913,
        914,1,0,0,0,914,916,1,0,0,0,915,913,1,0,0,0,916,917,3,276,136,0,
        917,243,1,0,0,0,918,922,5,39,0,0,919,923,8,8,0,0,920,921,5,92,0,
        0,921,923,9,0,0,0,922,919,1,0,0,0,922,920,1,0,0,0,923,924,1,0,0,
        0,924,925,5,39,0,0,925,245,1,0,0,0,926,927,5,39,0,0,927,931,7,6,
        0,0,928,930,7,7,0,0,929,928,1,0,0,0,930,933,1,0,0,0,931,929,1,0,
        0,0,931,932,1,0,0,0,932,944,1,0,0,0,933,931,1,0,0,0,934,935,5,58,
        0,0,935,936,5,58,0,0,936,937,1,0,0,0,937,941,7,6,0,0,938,940,7,7,
        0,0,939,938,1,0,0,0,940,943,1,0,0,0,941,939,1,0,0,0,941,942,1,0,
        0,0,942,945,1,0,0,0,943,941,1,0,0,0,944,934,1,0,0,0,944,945,1,0,
        0,0,945,247,1,0,0,0,946,947,5,39,0,0,947,249,1,0,0,0,948,949,5,99,
        0,0,949,950,5,108,0,0,950,951,5,111,0,0,951,952,5,110,0,0,952,953,
        5,101,0,0,953,954,5,95,0,0,954,955,5,111,0,0,955,956,5,98,0,0,956,
        957,5,106,0,0,957,958,5,101,0,0,958,959,5,99,0,0,959,960,5,116,0,
        0,960,251,1,0,0,0,961,962,5,108,0,0,962,963,5,111,0,0,963,964,5,
        97,0,0,964,965,5,100,0,0,965,966,5,95,0,0,966,967,5,111,0,0,967,
        968,5,98,0,0,968,969,5,106,0,0,969,970,5,101,0,0,970,971,5,99,0,
        0,971,972,5,116,0,0,972,253,1,0,0,0,973,977,7,6,0,0,974,976,7,7,
        0,0,975,974,1,0,0,0,976,979,1,0,0,0,977,975,1,0,0,0,977,978,1,0,
        0,0,978,255,1,0,0,0,979,977,1,0,0,0,980,981,5,47,0,0,981,982,5,42,
        0,0,982,986,1,0,0,0,983,985,9,0,0,0,984,983,1,0,0,0,985,988,1,0,
        0,0,986,987,1,0,0,0,986,984,1,0,0,0,987,989,1,0,0,0,988,986,1,0,
        0,0,989,990,5,42,0,0,990,991,5,47,0,0,991,992,1,0,0,0,992,993,6,
        126,3,0,993,257,1,0,0,0,994,995,5,47,0,0,995,996,5,47,0,0,996,1000,
        1,0,0,0,997,999,9,0,0,0,998,997,1,0,0,0,999,1002,1,0,0,0,1000,1001,
        1,0,0,0,1000,998,1,0,0,0,1001,1004,1,0,0,0,1002,1000,1,0,0,0,1003,
        1005,7,9,0,0,1004,1003,1,0,0,0,1005,1006,1,0,0,0,1006,1007,6,127,
        3,0,1007,259,1,0,0,0,1008,1012,3,48,22,0,1009,1011,7,10,0,0,1010,
        1009,1,0,0,0,1011,1014,1,0,0,0,1012,1010,1,0,0,0,1012,1013,1,0,0,
        0,1013,1015,1,0,0,0,1014,1012,1,0,0,0,1015,1016,5,100,0,0,1016,1017,
        5,101,0,0,1017,1018,5,102,0,0,1018,1019,5,105,0,0,1019,1020,5,110,
        0,0,1020,1021,5,101,0,0,1021,1022,1,0,0,0,1022,1023,6,128,4,0,1023,
        261,1,0,0,0,1024,1026,7,0,0,0,1025,1024,1,0,0,0,1026,1027,1,0,0,
        0,1027,1025,1,0,0,0,1027,1028,1,0,0,0,1028,1029,1,0,0,0,1029,1030,
        6,129,5,0,1030,263,1,0,0,0,1031,1033,8,11,0,0,1032,1031,1,0,0,0,
        1033,1034,1,0,0,0,1034,1032,1,0,0,0,1034,1035,1,0,0,0,1035,1041,
        1,0,0,0,1036,1037,5,92,0,0,1037,1041,8,12,0,0,1038,1039,5,47,0,0,
        1039,1041,8,13,0,0,1040,1032,1,0,0,0,1040,1036,1,0,0,0,1040,1038,
        1,0,0,0,1041,1044,1,0,0,0,1042,1043,5,92,0,0,1043,1045,5,10,0,0,
        1044,1042,1,0,0,0,1044,1045,1,0,0,0,1045,1046,1,0,0,0,1046,1047,
        6,130,6,0,1047,265,1,0,0,0,1048,1049,5,92,0,0,1049,1050,5,10,0,0,
        1050,1051,1,0,0,0,1051,1052,6,131,6,0,1052,267,1,0,0,0,1053,1054,
        5,47,0,0,1054,1055,5,47,0,0,1055,1057,1,0,0,0,1056,1058,8,12,0,0,
        1057,1056,1,0,0,0,1058,1059,1,0,0,0,1059,1057,1,0,0,0,1059,1060,
        1,0,0,0,1060,1061,1,0,0,0,1061,1062,6,132,6,0,1062,269,1,0,0,0,1063,
        1064,5,47,0,0,1064,1065,5,42,0,0,1065,1069,1,0,0,0,1066,1070,8,14,
        0,0,1067,1068,5,42,0,0,1068,1070,8,15,0,0,1069,1066,1,0,0,0,1069,
        1067,1,0,0,0,1070,1071,1,0,0,0,1071,1072,1,0,0,0,1071,1069,1,0,0,
        0,1072,1074,1,0,0,0,1073,1075,5,42,0,0,1074,1073,1,0,0,0,1075,1076,
        1,0,0,0,1076,1074,1,0,0,0,1076,1077,1,0,0,0,1077,1078,1,0,0,0,1078,
        1079,5,47,0,0,1079,1080,1,0,0,0,1080,1081,6,133,6,0,1081,271,1,0,
        0,0,1082,1084,7,9,0,0,1083,1082,1,0,0,0,1084,1085,1,0,0,0,1085,1086,
        6,134,7,0,1086,273,1,0,0,0,1087,1092,8,16,0,0,1088,1092,5,10,0,0,
        1089,1090,5,92,0,0,1090,1092,9,0,0,0,1091,1087,1,0,0,0,1091,1088,
        1,0,0,0,1091,1089,1,0,0,0,1092,1093,1,0,0,0,1093,1094,6,135,6,0,
        1094,275,1,0,0,0,1095,1096,5,34,0,0,1096,1097,1,0,0,0,1097,1098,
        6,136,8,0,1098,277,1,0,0,0,1099,1101,8,17,0,0,1100,1099,1,0,0,0,
        1101,1102,1,0,0,0,1102,1100,1,0,0,0,1102,1103,1,0,0,0,1103,1104,
        1,0,0,0,1104,1105,4,137,4,0,1105,1106,1,0,0,0,1106,1107,6,137,6,
        0,1107,279,1,0,0,0,1108,1110,7,17,0,0,1109,1108,1,0,0,0,1110,1111,
        1,0,0,0,1111,1109,1,0,0,0,1111,1112,1,0,0,0,1112,1116,1,0,0,0,1113,
        1115,7,10,0,0,1114,1113,1,0,0,0,1115,1118,1,0,0,0,1116,1114,1,0,
        0,0,1116,1117,1,0,0,0,1117,1126,1,0,0,0,1118,1116,1,0,0,0,1119,1123,
        7,6,0,0,1120,1122,7,7,0,0,1121,1120,1,0,0,0,1122,1125,1,0,0,0,1123,
        1121,1,0,0,0,1123,1124,1,0,0,0,1124,1127,1,0,0,0,1125,1123,1,0,0,
        0,1126,1119,1,0,0,0,1127,1128,1,0,0,0,1128,1126,1,0,0,0,1128,1129,
        1,0,0,0,1129,1130,1,0,0,0,1130,1131,4,138,5,0,1131,1132,1,0,0,0,
        1132,1133,6,138,8,0,1133,281,1,0,0,0,1134,1136,7,0,0,0,1135,1134,
        1,0,0,0,1136,1137,1,0,0,0,1137,1135,1,0,0,0,1137,1138,1,0,0,0,1138,
        1139,1,0,0,0,1139,1140,6,139,6,0,1140,283,1,0,0,0,43,0,1,2,3,821,
        844,848,853,859,866,870,875,877,884,888,894,907,913,922,931,941,
        944,977,986,1000,1004,1012,1027,1034,1040,1044,1059,1069,1071,1076,
        1083,1091,1102,1111,1116,1123,1128,1137,9,1,117,0,2,3,0,2,2,0,0,
        2,0,5,1,0,0,1,0,3,0,0,4,0,0,2,0,0
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!LPCLexer.__ATN) {
            LPCLexer.__ATN = new antlr.ATNDeserializer().deserialize(LPCLexer._serializedATN);
        }

        return LPCLexer.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(LPCLexer.literalNames, LPCLexer.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return LPCLexer.vocabulary;
    }

    private static readonly decisionsToDFA = LPCLexer._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}