// Generated from grammar/LPCLexer.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

 
    import {LPCLexerBase} from "./LPCLexerBase";


export class LPCLexer extends LPCLexerBase {
    public static readonly BREAK = 1;
    public static readonly BUFFER = 2;
    public static readonly BYTES = 3;
    public static readonly CASE = 4;
    public static readonly CATCH = 5;
    public static readonly CHAR = 6;
    public static readonly CLASS = 7;
    public static readonly CLOSURE = 8;
    public static readonly CONST = 9;
    public static readonly CONTINUE = 10;
    public static readonly DEFAULT = 11;
    public static readonly DO = 12;
    public static readonly ECHO = 13;
    public static readonly ELSE = 14;
    public static readonly ELIF = 15;
    public static readonly ENDIF = 16;
    public static readonly ENUM = 17;
    public static readonly FLOAT = 18;
    public static readonly FOR = 19;
    public static readonly FOREACH = 20;
    public static readonly FUNCTIONS = 21;
    public static readonly FUNCTION = 22;
    public static readonly HASH = 23;
    public static readonly IF = 24;
    public static readonly IFDEF = 25;
    public static readonly IFNDEF = 26;
    public static readonly IN = 27;
    public static readonly INCLUDE = 28;
    public static readonly INHERIT = 29;
    public static readonly INT = 30;
    public static readonly LINE = 31;
    public static readonly LWOBJECT = 32;
    public static readonly MAPPING = 33;
    public static readonly MIXED = 34;
    public static readonly NEW = 35;
    public static readonly OBJECT = 36;
    public static readonly PRAGMA = 37;
    public static readonly RETURN = 38;
    public static readonly STATUS = 39;
    public static readonly STRUCTS = 40;
    public static readonly STRUCT = 41;
    public static readonly STRING = 42;
    public static readonly SYMBOL = 43;
    public static readonly SWITCH = 44;
    public static readonly TYPEDEF = 45;
    public static readonly UNDEF = 46;
    public static readonly VARIABLES = 47;
    public static readonly VIRTUAL = 48;
    public static readonly VOID = 49;
    public static readonly VOLATILE = 50;
    public static readonly WHILE = 51;
    public static readonly DEPRECATED = 52;
    public static readonly PRIVATE = 53;
    public static readonly PROTECTED = 54;
    public static readonly PUBLIC = 55;
    public static readonly STATIC = 56;
    public static readonly VISIBLE = 57;
    public static readonly NOSHADOW = 58;
    public static readonly NOSAVE = 59;
    public static readonly NOMASK = 60;
    public static readonly VARARGS = 61;
    public static readonly SUPER_ACCESSOR = 62;
    public static readonly PLUS = 63;
    public static readonly MINUS = 64;
    public static readonly STAR = 65;
    public static readonly DIV = 66;
    public static readonly MOD = 67;
    public static readonly INC = 68;
    public static readonly DEC = 69;
    public static readonly SHL = 70;
    public static readonly SHR = 71;
    public static readonly LT = 72;
    public static readonly GT = 73;
    public static readonly LE = 74;
    public static readonly GE = 75;
    public static readonly EQ = 76;
    public static readonly NE = 77;
    public static readonly AND = 78;
    public static readonly OR = 79;
    public static readonly XOR = 80;
    public static readonly NOT = 81;
    public static readonly BNOT = 82;
    public static readonly AND_AND = 83;
    public static readonly OR_OR = 84;
    public static readonly QUESTION = 85;
    public static readonly COLON = 86;
    public static readonly SEMI = 87;
    public static readonly COMMA = 88;
    public static readonly TRIPPLEDOT = 89;
    public static readonly DOUBLEDOT = 90;
    public static readonly DOT = 91;
    public static readonly ASSIGN = 92;
    public static readonly ADD_ASSIGN = 93;
    public static readonly SUB_ASSIGN = 94;
    public static readonly MUL_ASSIGN = 95;
    public static readonly DIV_ASSIGN = 96;
    public static readonly MOD_ASSIGN = 97;
    public static readonly OR_ASSIGN = 98;
    public static readonly AND_ASSIGN = 99;
    public static readonly BITAND_ASSIGN = 100;
    public static readonly BITOR_ASSIGN = 101;
    public static readonly XOR_ASSIGN = 102;
    public static readonly SHL_ASSIGN = 103;
    public static readonly RSH_ASSIGN = 104;
    public static readonly MAPPING_OPEN = 105;
    public static readonly ARROW = 106;
    public static readonly PAREN_OPEN = 107;
    public static readonly PAREN_CLOSE = 108;
    public static readonly CURLY_OPEN = 109;
    public static readonly CURLY_CLOSE = 110;
    public static readonly SQUARE_OPEN = 111;
    public static readonly SQUARE_CLOSE = 112;
    public static readonly BACKSLASH = 113;
    public static readonly IntegerConstant = 114;
    public static readonly FloatingConstant = 115;
    public static readonly HexIntConstant = 116;
    public static readonly TextFormatDirective = 117;
    public static readonly STRING_START = 118;
    public static readonly StringLiteral = 119;
    public static readonly CharacterConstant = 120;
    public static readonly LAMBDA_IDENTIFIER = 121;
    public static readonly SINGLEQUOT = 122;
    public static readonly LoadObject = 123;
    public static readonly Identifier = 124;
    public static readonly COMMENT = 125;
    public static readonly LINE_COMMENT = 126;
    public static readonly DEFINE = 127;
    public static readonly WS = 128;
    public static readonly END_DEFINE = 129;
    public static readonly STRING_END = 130;
    public static readonly TEXT_FORMAT_END = 131;
    public static readonly NEWLINE = 132;
    public static readonly DEFINE_MODE = 1;
    public static readonly STRING_MODE = 2;
    public static readonly TEXT_FORMAT_MODE = 3;

    public static readonly channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN", "COMMENTS_CHANNEL", "DIRECTIVE_CHANNEL", 
                                           "DISABLED_CHANNEL"
    ];

    public static readonly literalNames = [
        null, "'break'", "'buffer'", "'bytes'", "'case'", "'catch'", "'char'", 
        "'class'", "'closure'", "'const'", "'continue'", "'default'", "'do'", 
        "'#echo'", "'else'", "'elif'", "'endif'", "'enum'", "'float'", "'for'", 
        "'foreach'", "'functions'", "'function'", "'#'", "'if'", "'ifdef'", 
        "'ifndef'", "'in'", "'include'", "'inherit'", "'int'", "'#line'", 
        "'lwobject'", "'mapping'", "'mixed'", "'new'", "'object'", "'pragma'", 
        "'return'", "'status'", "'structs'", "'struct'", "'string'", "'symbol'", 
        "'switch'", "'typedef'", "'undef'", "'variables'", "'virtual'", 
        "'void'", "'volatile'", "'while'", "'deprecated'", "'private'", 
        "'protected'", "'public'", "'static'", "'visible'", "'noshadow'", 
        "'nosave'", "'nomask'", "'varargs'", "'::'", "'+'", "'-'", "'*'", 
        "'/'", "'%'", "'++'", "'--'", "'<<'", "'>>'", "'<'", "'>'", "'<='", 
        "'>='", "'=='", "'!='", "'&'", "'|'", "'^'", "'!'", "'~'", "'&&'", 
        "'||'", "'?'", "':'", "';'", "','", "'...'", "'..'", "'.'", "'='", 
        "'+='", "'-='", "'*='", "'/='", "'%='", "'||='", "'&&='", "'&='", 
        "'|='", "'^='", "'<<='", "'>>='", null, "'->'", "'('", "')'", "'{'", 
        "'}'", "'['", "']'", "'\\'", null, null, null, null, null, null, 
        null, null, "'''", "'load_object'", null, null, null, null, null, 
        null, null, null, "'\\\\n'"
    ];

    public static readonly symbolicNames = [
        null, "BREAK", "BUFFER", "BYTES", "CASE", "CATCH", "CHAR", "CLASS", 
        "CLOSURE", "CONST", "CONTINUE", "DEFAULT", "DO", "ECHO", "ELSE", 
        "ELIF", "ENDIF", "ENUM", "FLOAT", "FOR", "FOREACH", "FUNCTIONS", 
        "FUNCTION", "HASH", "IF", "IFDEF", "IFNDEF", "IN", "INCLUDE", "INHERIT", 
        "INT", "LINE", "LWOBJECT", "MAPPING", "MIXED", "NEW", "OBJECT", 
        "PRAGMA", "RETURN", "STATUS", "STRUCTS", "STRUCT", "STRING", "SYMBOL", 
        "SWITCH", "TYPEDEF", "UNDEF", "VARIABLES", "VIRTUAL", "VOID", "VOLATILE", 
        "WHILE", "DEPRECATED", "PRIVATE", "PROTECTED", "PUBLIC", "STATIC", 
        "VISIBLE", "NOSHADOW", "NOSAVE", "NOMASK", "VARARGS", "SUPER_ACCESSOR", 
        "PLUS", "MINUS", "STAR", "DIV", "MOD", "INC", "DEC", "SHL", "SHR", 
        "LT", "GT", "LE", "GE", "EQ", "NE", "AND", "OR", "XOR", "NOT", "BNOT", 
        "AND_AND", "OR_OR", "QUESTION", "COLON", "SEMI", "COMMA", "TRIPPLEDOT", 
        "DOUBLEDOT", "DOT", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", 
        "DIV_ASSIGN", "MOD_ASSIGN", "OR_ASSIGN", "AND_ASSIGN", "BITAND_ASSIGN", 
        "BITOR_ASSIGN", "XOR_ASSIGN", "SHL_ASSIGN", "RSH_ASSIGN", "MAPPING_OPEN", 
        "ARROW", "PAREN_OPEN", "PAREN_CLOSE", "CURLY_OPEN", "CURLY_CLOSE", 
        "SQUARE_OPEN", "SQUARE_CLOSE", "BACKSLASH", "IntegerConstant", "FloatingConstant", 
        "HexIntConstant", "TextFormatDirective", "STRING_START", "StringLiteral", 
        "CharacterConstant", "LAMBDA_IDENTIFIER", "SINGLEQUOT", "LoadObject", 
        "Identifier", "COMMENT", "LINE_COMMENT", "DEFINE", "WS", "END_DEFINE", 
        "STRING_END", "TEXT_FORMAT_END", "NEWLINE"
    ];

    public static readonly modeNames = [
        "DEFAULT_MODE", "DEFINE_MODE", "STRING_MODE", "TEXT_FORMAT_MODE",
    ];

    public static readonly ruleNames = [
        "BREAK", "BUFFER", "BYTES", "CASE", "CATCH", "CHAR", "CLASS", "CLOSURE", 
        "CONST", "CONTINUE", "DEFAULT", "DO", "ECHO", "ELSE", "ELIF", "ENDIF", 
        "ENUM", "FLOAT", "FOR", "FOREACH", "FUNCTIONS", "FUNCTION", "HASH", 
        "IF", "IFDEF", "IFNDEF", "IN", "INCLUDE", "INHERIT", "INT", "LINE", 
        "LWOBJECT", "MAPPING", "MIXED", "NEW", "OBJECT", "PRAGMA", "RETURN", 
        "STATUS", "STRUCTS", "STRUCT", "STRING", "SYMBOL", "SWITCH", "TYPEDEF", 
        "UNDEF", "VARIABLES", "VIRTUAL", "VOID", "VOLATILE", "WHILE", "DEPRECATED", 
        "PRIVATE", "PROTECTED", "PUBLIC", "STATIC", "VISIBLE", "NOSHADOW", 
        "NOSAVE", "NOMASK", "VARARGS", "SUPER_ACCESSOR", "PLUS", "MINUS", 
        "STAR", "DIV", "MOD", "INC", "DEC", "SHL", "SHR", "LT", "GT", "LE", 
        "GE", "EQ", "NE", "AND", "OR", "XOR", "NOT", "BNOT", "AND_AND", 
        "OR_OR", "QUESTION", "COLON", "SEMI", "COMMA", "TRIPPLEDOT", "DOUBLEDOT", 
        "DOT", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
        "MOD_ASSIGN", "OR_ASSIGN", "AND_ASSIGN", "BITAND_ASSIGN", "BITOR_ASSIGN", 
        "XOR_ASSIGN", "SHL_ASSIGN", "RSH_ASSIGN", "MAPPING_OPEN", "ARROW", 
        "PAREN_OPEN", "PAREN_CLOSE", "CURLY_OPEN", "CURLY_CLOSE", "SQUARE_OPEN", 
        "SQUARE_CLOSE", "BACKSLASH", "HexDigit", "IntegerConstant", "FloatingConstant", 
        "HexIntConstant", "TextFormatDirective", "STRING_START", "StringLiteral", 
        "CharacterConstant", "LAMBDA_IDENTIFIER", "SINGLEQUOT", "LoadObject", 
        "Identifier", "COMMENT", "LINE_COMMENT", "DEFINE", "WS", "DEFINE_CONTENT", 
        "NEWLINE", "DEFINE_COMMENT", "DEFINE_BLOCK_COMMENT", "END_DEFINE", 
        "STRING_CONTENT", "STRING_END", "TEXT_FORMAT_CONTENT", "TEXT_FORMAT_END", 
        "TEXT_FORMAT_WS",
    ];

        
        _textMark = "";


    public constructor(input: antlr.CharStream) {
        super(input);
        this.interpreter = new antlr.LexerATNSimulator(this, LPCLexer._ATN, LPCLexer.decisionsToDFA, new antlr.PredictionContextCache());
    }

    public get grammarFileName(): string { return "LPCLexer.g4"; }

    public get literalNames(): (string | null)[] { return LPCLexer.literalNames; }
    public get symbolicNames(): (string | null)[] { return LPCLexer.symbolicNames; }
    public get ruleNames(): string[] { return LPCLexer.ruleNames; }

    public get serializedATN(): number[] { return LPCLexer._serializedATN; }

    public get channelNames(): string[] { return LPCLexer.channelNames; }

    public get modeNames(): string[] { return LPCLexer.modeNames; }

    public override action(localContext: antlr.ParserRuleContext | null, ruleIndex: number, actionIndex: number): void {
        switch (ruleIndex) {
        case 117:
            this.TextFormatDirective_action(localContext, actionIndex);
            break;
        }
    }
    private TextFormatDirective_action(localContext: antlr.ParserRuleContext | null, actionIndex: number): void {
        switch (actionIndex) {
        case 0:
             this._textMark = this.text.substring(this.text.startsWith("@@") ? 2 : 1); 
            break;
        }
    }
    public override sempred(localContext: antlr.ParserRuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 6:
            return this.CLASS_sempred(localContext, predIndex);
        case 34:
            return this.NEW_sempred(localContext, predIndex);
        case 38:
            return this.STATUS_sempred(localContext, predIndex);
        case 117:
            return this.TextFormatDirective_sempred(localContext, predIndex);
        case 136:
            return this.TEXT_FORMAT_CONTENT_sempred(localContext, predIndex);
        case 137:
            return this.TEXT_FORMAT_END_sempred(localContext, predIndex);
        }
        return true;
    }
    private CLASS_sempred(localContext: antlr.ParserRuleContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return  this.isFluff() ;
        }
        return true;
    }
    private NEW_sempred(localContext: antlr.ParserRuleContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 1:
            return  this.isFluff() ;
        }
        return true;
    }
    private STATUS_sempred(localContext: antlr.ParserRuleContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 2:
            return  this.isLD() ;
        }
        return true;
    }
    private TextFormatDirective_sempred(localContext: antlr.ParserRuleContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 3:
            return  this.isFluff() ;
        }
        return true;
    }
    private TEXT_FORMAT_CONTENT_sempred(localContext: antlr.ParserRuleContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 4:
            return  this.text.trim() != this._textMark ;
        }
        return true;
    }
    private TEXT_FORMAT_END_sempred(localContext: antlr.ParserRuleContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 5:
            return  this.text.trim() == this._textMark ;
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,0,132,1126,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,
        2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,
        11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,
        18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,
        24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
        31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,
        37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,
        44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,
        50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,
        57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
        63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,
        70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,
        76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,
        83,7,83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,
        89,2,90,7,90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,
        96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,
        102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,
        7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,2,112,7,112,
        2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,2,118,
        7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
        2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,
        7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
        2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,1,0,1,0,1,0,1,0,
        1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,
        1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,
        1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
        1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,
        1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,
        1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,
        1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,
        1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,
        1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,
        1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,
        1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,
        1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
        1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
        1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,56,1,56,
        1,56,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
        1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,
        1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,61,1,61,
        1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,
        1,67,1,68,1,68,1,68,1,69,1,69,1,69,1,70,1,70,1,70,1,71,1,71,1,72,
        1,72,1,73,1,73,1,73,1,74,1,74,1,74,1,75,1,75,1,75,1,76,1,76,1,76,
        1,77,1,77,1,78,1,78,1,79,1,79,1,80,1,80,1,81,1,81,1,82,1,82,1,82,
        1,83,1,83,1,83,1,84,1,84,1,85,1,85,1,86,1,86,1,87,1,87,1,88,1,88,
        1,88,1,88,1,89,1,89,1,89,1,90,1,90,1,91,1,91,1,92,1,92,1,92,1,93,
        1,93,1,93,1,94,1,94,1,94,1,95,1,95,1,95,1,96,1,96,1,96,1,97,1,97,
        1,97,1,97,1,98,1,98,1,98,1,98,1,99,1,99,1,99,1,100,1,100,1,100,1,
        101,1,101,1,101,1,102,1,102,1,102,1,102,1,103,1,103,1,103,1,103,
        1,104,1,104,5,104,818,8,104,10,104,12,104,821,9,104,1,104,1,104,
        1,105,1,105,1,105,1,106,1,106,1,107,1,107,1,108,1,108,1,109,1,109,
        1,110,1,110,1,111,1,111,1,112,1,112,1,113,3,113,843,8,113,1,114,
        1,114,3,114,847,8,114,1,114,5,114,850,8,114,10,114,12,114,853,9,
        114,1,115,5,115,856,8,115,10,115,12,115,859,9,115,1,115,1,115,4,
        115,863,8,115,11,115,12,115,864,1,115,1,115,3,115,869,8,115,1,115,
        4,115,872,8,115,11,115,12,115,873,3,115,876,8,115,1,116,1,116,1,
        116,4,116,881,8,116,11,116,12,116,882,1,117,1,117,3,117,887,8,117,
        1,117,1,117,5,117,891,8,117,10,117,12,117,894,9,117,1,117,1,117,
        1,117,1,117,1,117,1,118,1,118,1,118,1,118,1,119,3,119,906,8,119,
        1,119,1,119,5,119,910,8,119,10,119,12,119,913,9,119,1,119,1,119,
        1,120,1,120,1,120,1,120,3,120,921,8,120,1,120,1,120,1,121,1,121,
        1,121,5,121,928,8,121,10,121,12,121,931,9,121,1,121,1,121,1,121,
        1,121,1,121,5,121,938,8,121,10,121,12,121,941,9,121,3,121,943,8,
        121,1,122,1,122,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,
        1,123,1,123,1,123,1,123,1,124,1,124,5,124,961,8,124,10,124,12,124,
        964,9,124,1,125,1,125,1,125,1,125,5,125,970,8,125,10,125,12,125,
        973,9,125,1,125,1,125,1,125,1,125,1,125,1,126,1,126,1,126,1,126,
        5,126,984,8,126,10,126,12,126,987,9,126,1,126,3,126,990,8,126,1,
        126,1,126,1,127,1,127,5,127,996,8,127,10,127,12,127,999,9,127,1,
        127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,128,4,128,
        1011,8,128,11,128,12,128,1012,1,128,1,128,1,129,4,129,1018,8,129,
        11,129,12,129,1019,1,129,1,129,1,129,1,129,3,129,1026,8,129,1,129,
        1,129,3,129,1030,8,129,1,129,1,129,1,130,1,130,1,130,1,130,1,130,
        1,131,1,131,1,131,1,131,4,131,1043,8,131,11,131,12,131,1044,1,131,
        1,131,1,132,1,132,1,132,1,132,1,132,1,132,4,132,1055,8,132,11,132,
        12,132,1056,1,132,4,132,1060,8,132,11,132,12,132,1061,1,132,1,132,
        1,132,1,132,1,133,3,133,1069,8,133,1,133,1,133,1,134,1,134,1,134,
        1,134,3,134,1077,8,134,1,134,1,134,1,135,1,135,1,135,1,135,1,136,
        4,136,1086,8,136,11,136,12,136,1087,1,136,1,136,1,136,1,136,1,137,
        4,137,1095,8,137,11,137,12,137,1096,1,137,5,137,1100,8,137,10,137,
        12,137,1103,9,137,1,137,1,137,5,137,1107,8,137,10,137,12,137,1110,
        9,137,4,137,1112,8,137,11,137,12,137,1113,1,137,1,137,1,137,1,137,
        1,138,4,138,1121,8,138,11,138,12,138,1122,1,138,1,138,3,971,985,
        1056,0,139,4,1,6,2,8,3,10,4,12,5,14,6,16,7,18,8,20,9,22,10,24,11,
        26,12,28,13,30,14,32,15,34,16,36,17,38,18,40,19,42,20,44,21,46,22,
        48,23,50,24,52,25,54,26,56,27,58,28,60,29,62,30,64,31,66,32,68,33,
        70,34,72,35,74,36,76,37,78,38,80,39,82,40,84,41,86,42,88,43,90,44,
        92,45,94,46,96,47,98,48,100,49,102,50,104,51,106,52,108,53,110,54,
        112,55,114,56,116,57,118,58,120,59,122,60,124,61,126,62,128,63,130,
        64,132,65,134,66,136,67,138,68,140,69,142,70,144,71,146,72,148,73,
        150,74,152,75,154,76,156,77,158,78,160,79,162,80,164,81,166,82,168,
        83,170,84,172,85,174,86,176,87,178,88,180,89,182,90,184,91,186,92,
        188,93,190,94,192,95,194,96,196,97,198,98,200,99,202,100,204,101,
        206,102,208,103,210,104,212,105,214,106,216,107,218,108,220,109,
        222,110,224,111,226,112,228,113,230,0,232,114,234,115,236,116,238,
        117,240,118,242,119,244,120,246,121,248,122,250,123,252,124,254,
        125,256,126,258,127,260,128,262,0,264,132,266,0,268,0,270,129,272,
        0,274,130,276,0,278,131,280,0,4,0,1,2,3,18,3,0,9,10,13,13,32,32,
        3,0,48,57,65,70,97,102,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,
        45,2,0,88,88,120,120,4,0,36,36,65,90,95,95,97,122,4,0,48,57,65,90,
        95,95,97,122,4,0,10,10,13,13,39,39,92,92,1,1,10,10,2,0,9,9,32,32,
        3,0,10,10,47,47,92,92,1,0,10,10,2,0,42,42,47,47,1,0,42,42,1,0,47,
        47,3,0,10,10,34,34,92,92,2,0,10,10,13,13,1159,0,4,1,0,0,0,0,6,1,
        0,0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,0,16,1,
        0,0,0,0,18,1,0,0,0,0,20,1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,0,26,1,
        0,0,0,0,28,1,0,0,0,0,30,1,0,0,0,0,32,1,0,0,0,0,34,1,0,0,0,0,36,1,
        0,0,0,0,38,1,0,0,0,0,40,1,0,0,0,0,42,1,0,0,0,0,44,1,0,0,0,0,46,1,
        0,0,0,0,48,1,0,0,0,0,50,1,0,0,0,0,52,1,0,0,0,0,54,1,0,0,0,0,56,1,
        0,0,0,0,58,1,0,0,0,0,60,1,0,0,0,0,62,1,0,0,0,0,64,1,0,0,0,0,66,1,
        0,0,0,0,68,1,0,0,0,0,70,1,0,0,0,0,72,1,0,0,0,0,74,1,0,0,0,0,76,1,
        0,0,0,0,78,1,0,0,0,0,80,1,0,0,0,0,82,1,0,0,0,0,84,1,0,0,0,0,86,1,
        0,0,0,0,88,1,0,0,0,0,90,1,0,0,0,0,92,1,0,0,0,0,94,1,0,0,0,0,96,1,
        0,0,0,0,98,1,0,0,0,0,100,1,0,0,0,0,102,1,0,0,0,0,104,1,0,0,0,0,106,
        1,0,0,0,0,108,1,0,0,0,0,110,1,0,0,0,0,112,1,0,0,0,0,114,1,0,0,0,
        0,116,1,0,0,0,0,118,1,0,0,0,0,120,1,0,0,0,0,122,1,0,0,0,0,124,1,
        0,0,0,0,126,1,0,0,0,0,128,1,0,0,0,0,130,1,0,0,0,0,132,1,0,0,0,0,
        134,1,0,0,0,0,136,1,0,0,0,0,138,1,0,0,0,0,140,1,0,0,0,0,142,1,0,
        0,0,0,144,1,0,0,0,0,146,1,0,0,0,0,148,1,0,0,0,0,150,1,0,0,0,0,152,
        1,0,0,0,0,154,1,0,0,0,0,156,1,0,0,0,0,158,1,0,0,0,0,160,1,0,0,0,
        0,162,1,0,0,0,0,164,1,0,0,0,0,166,1,0,0,0,0,168,1,0,0,0,0,170,1,
        0,0,0,0,172,1,0,0,0,0,174,1,0,0,0,0,176,1,0,0,0,0,178,1,0,0,0,0,
        180,1,0,0,0,0,182,1,0,0,0,0,184,1,0,0,0,0,186,1,0,0,0,0,188,1,0,
        0,0,0,190,1,0,0,0,0,192,1,0,0,0,0,194,1,0,0,0,0,196,1,0,0,0,0,198,
        1,0,0,0,0,200,1,0,0,0,0,202,1,0,0,0,0,204,1,0,0,0,0,206,1,0,0,0,
        0,208,1,0,0,0,0,210,1,0,0,0,0,212,1,0,0,0,0,214,1,0,0,0,0,216,1,
        0,0,0,0,218,1,0,0,0,0,220,1,0,0,0,0,222,1,0,0,0,0,224,1,0,0,0,0,
        226,1,0,0,0,0,228,1,0,0,0,0,232,1,0,0,0,0,234,1,0,0,0,0,236,1,0,
        0,0,0,238,1,0,0,0,0,240,1,0,0,0,0,242,1,0,0,0,0,244,1,0,0,0,0,246,
        1,0,0,0,0,248,1,0,0,0,0,250,1,0,0,0,0,252,1,0,0,0,0,254,1,0,0,0,
        0,256,1,0,0,0,0,258,1,0,0,0,0,260,1,0,0,0,1,262,1,0,0,0,1,264,1,
        0,0,0,1,266,1,0,0,0,1,268,1,0,0,0,1,270,1,0,0,0,2,272,1,0,0,0,2,
        274,1,0,0,0,3,276,1,0,0,0,3,278,1,0,0,0,3,280,1,0,0,0,4,282,1,0,
        0,0,6,288,1,0,0,0,8,295,1,0,0,0,10,301,1,0,0,0,12,306,1,0,0,0,14,
        312,1,0,0,0,16,317,1,0,0,0,18,325,1,0,0,0,20,333,1,0,0,0,22,339,
        1,0,0,0,24,348,1,0,0,0,26,356,1,0,0,0,28,359,1,0,0,0,30,365,1,0,
        0,0,32,370,1,0,0,0,34,375,1,0,0,0,36,381,1,0,0,0,38,386,1,0,0,0,
        40,392,1,0,0,0,42,396,1,0,0,0,44,404,1,0,0,0,46,414,1,0,0,0,48,423,
        1,0,0,0,50,425,1,0,0,0,52,428,1,0,0,0,54,434,1,0,0,0,56,441,1,0,
        0,0,58,444,1,0,0,0,60,452,1,0,0,0,62,460,1,0,0,0,64,464,1,0,0,0,
        66,470,1,0,0,0,68,479,1,0,0,0,70,487,1,0,0,0,72,493,1,0,0,0,74,499,
        1,0,0,0,76,506,1,0,0,0,78,513,1,0,0,0,80,520,1,0,0,0,82,529,1,0,
        0,0,84,537,1,0,0,0,86,544,1,0,0,0,88,551,1,0,0,0,90,558,1,0,0,0,
        92,565,1,0,0,0,94,573,1,0,0,0,96,579,1,0,0,0,98,589,1,0,0,0,100,
        597,1,0,0,0,102,602,1,0,0,0,104,611,1,0,0,0,106,617,1,0,0,0,108,
        628,1,0,0,0,110,636,1,0,0,0,112,646,1,0,0,0,114,653,1,0,0,0,116,
        660,1,0,0,0,118,668,1,0,0,0,120,677,1,0,0,0,122,684,1,0,0,0,124,
        691,1,0,0,0,126,699,1,0,0,0,128,702,1,0,0,0,130,704,1,0,0,0,132,
        706,1,0,0,0,134,708,1,0,0,0,136,710,1,0,0,0,138,712,1,0,0,0,140,
        715,1,0,0,0,142,718,1,0,0,0,144,721,1,0,0,0,146,724,1,0,0,0,148,
        726,1,0,0,0,150,728,1,0,0,0,152,731,1,0,0,0,154,734,1,0,0,0,156,
        737,1,0,0,0,158,740,1,0,0,0,160,742,1,0,0,0,162,744,1,0,0,0,164,
        746,1,0,0,0,166,748,1,0,0,0,168,750,1,0,0,0,170,753,1,0,0,0,172,
        756,1,0,0,0,174,758,1,0,0,0,176,760,1,0,0,0,178,762,1,0,0,0,180,
        764,1,0,0,0,182,768,1,0,0,0,184,771,1,0,0,0,186,773,1,0,0,0,188,
        775,1,0,0,0,190,778,1,0,0,0,192,781,1,0,0,0,194,784,1,0,0,0,196,
        787,1,0,0,0,198,790,1,0,0,0,200,794,1,0,0,0,202,798,1,0,0,0,204,
        801,1,0,0,0,206,804,1,0,0,0,208,807,1,0,0,0,210,811,1,0,0,0,212,
        815,1,0,0,0,214,824,1,0,0,0,216,827,1,0,0,0,218,829,1,0,0,0,220,
        831,1,0,0,0,222,833,1,0,0,0,224,835,1,0,0,0,226,837,1,0,0,0,228,
        839,1,0,0,0,230,842,1,0,0,0,232,844,1,0,0,0,234,857,1,0,0,0,236,
        877,1,0,0,0,238,884,1,0,0,0,240,900,1,0,0,0,242,905,1,0,0,0,244,
        916,1,0,0,0,246,924,1,0,0,0,248,944,1,0,0,0,250,946,1,0,0,0,252,
        958,1,0,0,0,254,965,1,0,0,0,256,979,1,0,0,0,258,993,1,0,0,0,260,
        1010,1,0,0,0,262,1025,1,0,0,0,264,1033,1,0,0,0,266,1038,1,0,0,0,
        268,1048,1,0,0,0,270,1068,1,0,0,0,272,1076,1,0,0,0,274,1080,1,0,
        0,0,276,1085,1,0,0,0,278,1094,1,0,0,0,280,1120,1,0,0,0,282,283,5,
        98,0,0,283,284,5,114,0,0,284,285,5,101,0,0,285,286,5,97,0,0,286,
        287,5,107,0,0,287,5,1,0,0,0,288,289,5,98,0,0,289,290,5,117,0,0,290,
        291,5,102,0,0,291,292,5,102,0,0,292,293,5,101,0,0,293,294,5,114,
        0,0,294,7,1,0,0,0,295,296,5,98,0,0,296,297,5,121,0,0,297,298,5,116,
        0,0,298,299,5,101,0,0,299,300,5,115,0,0,300,9,1,0,0,0,301,302,5,
        99,0,0,302,303,5,97,0,0,303,304,5,115,0,0,304,305,5,101,0,0,305,
        11,1,0,0,0,306,307,5,99,0,0,307,308,5,97,0,0,308,309,5,116,0,0,309,
        310,5,99,0,0,310,311,5,104,0,0,311,13,1,0,0,0,312,313,5,99,0,0,313,
        314,5,104,0,0,314,315,5,97,0,0,315,316,5,114,0,0,316,15,1,0,0,0,
        317,318,5,99,0,0,318,319,5,108,0,0,319,320,5,97,0,0,320,321,5,115,
        0,0,321,322,5,115,0,0,322,323,1,0,0,0,323,324,4,6,0,0,324,17,1,0,
        0,0,325,326,5,99,0,0,326,327,5,108,0,0,327,328,5,111,0,0,328,329,
        5,115,0,0,329,330,5,117,0,0,330,331,5,114,0,0,331,332,5,101,0,0,
        332,19,1,0,0,0,333,334,5,99,0,0,334,335,5,111,0,0,335,336,5,110,
        0,0,336,337,5,115,0,0,337,338,5,116,0,0,338,21,1,0,0,0,339,340,5,
        99,0,0,340,341,5,111,0,0,341,342,5,110,0,0,342,343,5,116,0,0,343,
        344,5,105,0,0,344,345,5,110,0,0,345,346,5,117,0,0,346,347,5,101,
        0,0,347,23,1,0,0,0,348,349,5,100,0,0,349,350,5,101,0,0,350,351,5,
        102,0,0,351,352,5,97,0,0,352,353,5,117,0,0,353,354,5,108,0,0,354,
        355,5,116,0,0,355,25,1,0,0,0,356,357,5,100,0,0,357,358,5,111,0,0,
        358,27,1,0,0,0,359,360,5,35,0,0,360,361,5,101,0,0,361,362,5,99,0,
        0,362,363,5,104,0,0,363,364,5,111,0,0,364,29,1,0,0,0,365,366,5,101,
        0,0,366,367,5,108,0,0,367,368,5,115,0,0,368,369,5,101,0,0,369,31,
        1,0,0,0,370,371,5,101,0,0,371,372,5,108,0,0,372,373,5,105,0,0,373,
        374,5,102,0,0,374,33,1,0,0,0,375,376,5,101,0,0,376,377,5,110,0,0,
        377,378,5,100,0,0,378,379,5,105,0,0,379,380,5,102,0,0,380,35,1,0,
        0,0,381,382,5,101,0,0,382,383,5,110,0,0,383,384,5,117,0,0,384,385,
        5,109,0,0,385,37,1,0,0,0,386,387,5,102,0,0,387,388,5,108,0,0,388,
        389,5,111,0,0,389,390,5,97,0,0,390,391,5,116,0,0,391,39,1,0,0,0,
        392,393,5,102,0,0,393,394,5,111,0,0,394,395,5,114,0,0,395,41,1,0,
        0,0,396,397,5,102,0,0,397,398,5,111,0,0,398,399,5,114,0,0,399,400,
        5,101,0,0,400,401,5,97,0,0,401,402,5,99,0,0,402,403,5,104,0,0,403,
        43,1,0,0,0,404,405,5,102,0,0,405,406,5,117,0,0,406,407,5,110,0,0,
        407,408,5,99,0,0,408,409,5,116,0,0,409,410,5,105,0,0,410,411,5,111,
        0,0,411,412,5,110,0,0,412,413,5,115,0,0,413,45,1,0,0,0,414,415,5,
        102,0,0,415,416,5,117,0,0,416,417,5,110,0,0,417,418,5,99,0,0,418,
        419,5,116,0,0,419,420,5,105,0,0,420,421,5,111,0,0,421,422,5,110,
        0,0,422,47,1,0,0,0,423,424,5,35,0,0,424,49,1,0,0,0,425,426,5,105,
        0,0,426,427,5,102,0,0,427,51,1,0,0,0,428,429,5,105,0,0,429,430,5,
        102,0,0,430,431,5,100,0,0,431,432,5,101,0,0,432,433,5,102,0,0,433,
        53,1,0,0,0,434,435,5,105,0,0,435,436,5,102,0,0,436,437,5,110,0,0,
        437,438,5,100,0,0,438,439,5,101,0,0,439,440,5,102,0,0,440,55,1,0,
        0,0,441,442,5,105,0,0,442,443,5,110,0,0,443,57,1,0,0,0,444,445,5,
        105,0,0,445,446,5,110,0,0,446,447,5,99,0,0,447,448,5,108,0,0,448,
        449,5,117,0,0,449,450,5,100,0,0,450,451,5,101,0,0,451,59,1,0,0,0,
        452,453,5,105,0,0,453,454,5,110,0,0,454,455,5,104,0,0,455,456,5,
        101,0,0,456,457,5,114,0,0,457,458,5,105,0,0,458,459,5,116,0,0,459,
        61,1,0,0,0,460,461,5,105,0,0,461,462,5,110,0,0,462,463,5,116,0,0,
        463,63,1,0,0,0,464,465,5,35,0,0,465,466,5,108,0,0,466,467,5,105,
        0,0,467,468,5,110,0,0,468,469,5,101,0,0,469,65,1,0,0,0,470,471,5,
        108,0,0,471,472,5,119,0,0,472,473,5,111,0,0,473,474,5,98,0,0,474,
        475,5,106,0,0,475,476,5,101,0,0,476,477,5,99,0,0,477,478,5,116,0,
        0,478,67,1,0,0,0,479,480,5,109,0,0,480,481,5,97,0,0,481,482,5,112,
        0,0,482,483,5,112,0,0,483,484,5,105,0,0,484,485,5,110,0,0,485,486,
        5,103,0,0,486,69,1,0,0,0,487,488,5,109,0,0,488,489,5,105,0,0,489,
        490,5,120,0,0,490,491,5,101,0,0,491,492,5,100,0,0,492,71,1,0,0,0,
        493,494,5,110,0,0,494,495,5,101,0,0,495,496,5,119,0,0,496,497,1,
        0,0,0,497,498,4,34,1,0,498,73,1,0,0,0,499,500,5,111,0,0,500,501,
        5,98,0,0,501,502,5,106,0,0,502,503,5,101,0,0,503,504,5,99,0,0,504,
        505,5,116,0,0,505,75,1,0,0,0,506,507,5,112,0,0,507,508,5,114,0,0,
        508,509,5,97,0,0,509,510,5,103,0,0,510,511,5,109,0,0,511,512,5,97,
        0,0,512,77,1,0,0,0,513,514,5,114,0,0,514,515,5,101,0,0,515,516,5,
        116,0,0,516,517,5,117,0,0,517,518,5,114,0,0,518,519,5,110,0,0,519,
        79,1,0,0,0,520,521,5,115,0,0,521,522,5,116,0,0,522,523,5,97,0,0,
        523,524,5,116,0,0,524,525,5,117,0,0,525,526,5,115,0,0,526,527,1,
        0,0,0,527,528,4,38,2,0,528,81,1,0,0,0,529,530,5,115,0,0,530,531,
        5,116,0,0,531,532,5,114,0,0,532,533,5,117,0,0,533,534,5,99,0,0,534,
        535,5,116,0,0,535,536,5,115,0,0,536,83,1,0,0,0,537,538,5,115,0,0,
        538,539,5,116,0,0,539,540,5,114,0,0,540,541,5,117,0,0,541,542,5,
        99,0,0,542,543,5,116,0,0,543,85,1,0,0,0,544,545,5,115,0,0,545,546,
        5,116,0,0,546,547,5,114,0,0,547,548,5,105,0,0,548,549,5,110,0,0,
        549,550,5,103,0,0,550,87,1,0,0,0,551,552,5,115,0,0,552,553,5,121,
        0,0,553,554,5,109,0,0,554,555,5,98,0,0,555,556,5,111,0,0,556,557,
        5,108,0,0,557,89,1,0,0,0,558,559,5,115,0,0,559,560,5,119,0,0,560,
        561,5,105,0,0,561,562,5,116,0,0,562,563,5,99,0,0,563,564,5,104,0,
        0,564,91,1,0,0,0,565,566,5,116,0,0,566,567,5,121,0,0,567,568,5,112,
        0,0,568,569,5,101,0,0,569,570,5,100,0,0,570,571,5,101,0,0,571,572,
        5,102,0,0,572,93,1,0,0,0,573,574,5,117,0,0,574,575,5,110,0,0,575,
        576,5,100,0,0,576,577,5,101,0,0,577,578,5,102,0,0,578,95,1,0,0,0,
        579,580,5,118,0,0,580,581,5,97,0,0,581,582,5,114,0,0,582,583,5,105,
        0,0,583,584,5,97,0,0,584,585,5,98,0,0,585,586,5,108,0,0,586,587,
        5,101,0,0,587,588,5,115,0,0,588,97,1,0,0,0,589,590,5,118,0,0,590,
        591,5,105,0,0,591,592,5,114,0,0,592,593,5,116,0,0,593,594,5,117,
        0,0,594,595,5,97,0,0,595,596,5,108,0,0,596,99,1,0,0,0,597,598,5,
        118,0,0,598,599,5,111,0,0,599,600,5,105,0,0,600,601,5,100,0,0,601,
        101,1,0,0,0,602,603,5,118,0,0,603,604,5,111,0,0,604,605,5,108,0,
        0,605,606,5,97,0,0,606,607,5,116,0,0,607,608,5,105,0,0,608,609,5,
        108,0,0,609,610,5,101,0,0,610,103,1,0,0,0,611,612,5,119,0,0,612,
        613,5,104,0,0,613,614,5,105,0,0,614,615,5,108,0,0,615,616,5,101,
        0,0,616,105,1,0,0,0,617,618,5,100,0,0,618,619,5,101,0,0,619,620,
        5,112,0,0,620,621,5,114,0,0,621,622,5,101,0,0,622,623,5,99,0,0,623,
        624,5,97,0,0,624,625,5,116,0,0,625,626,5,101,0,0,626,627,5,100,0,
        0,627,107,1,0,0,0,628,629,5,112,0,0,629,630,5,114,0,0,630,631,5,
        105,0,0,631,632,5,118,0,0,632,633,5,97,0,0,633,634,5,116,0,0,634,
        635,5,101,0,0,635,109,1,0,0,0,636,637,5,112,0,0,637,638,5,114,0,
        0,638,639,5,111,0,0,639,640,5,116,0,0,640,641,5,101,0,0,641,642,
        5,99,0,0,642,643,5,116,0,0,643,644,5,101,0,0,644,645,5,100,0,0,645,
        111,1,0,0,0,646,647,5,112,0,0,647,648,5,117,0,0,648,649,5,98,0,0,
        649,650,5,108,0,0,650,651,5,105,0,0,651,652,5,99,0,0,652,113,1,0,
        0,0,653,654,5,115,0,0,654,655,5,116,0,0,655,656,5,97,0,0,656,657,
        5,116,0,0,657,658,5,105,0,0,658,659,5,99,0,0,659,115,1,0,0,0,660,
        661,5,118,0,0,661,662,5,105,0,0,662,663,5,115,0,0,663,664,5,105,
        0,0,664,665,5,98,0,0,665,666,5,108,0,0,666,667,5,101,0,0,667,117,
        1,0,0,0,668,669,5,110,0,0,669,670,5,111,0,0,670,671,5,115,0,0,671,
        672,5,104,0,0,672,673,5,97,0,0,673,674,5,100,0,0,674,675,5,111,0,
        0,675,676,5,119,0,0,676,119,1,0,0,0,677,678,5,110,0,0,678,679,5,
        111,0,0,679,680,5,115,0,0,680,681,5,97,0,0,681,682,5,118,0,0,682,
        683,5,101,0,0,683,121,1,0,0,0,684,685,5,110,0,0,685,686,5,111,0,
        0,686,687,5,109,0,0,687,688,5,97,0,0,688,689,5,115,0,0,689,690,5,
        107,0,0,690,123,1,0,0,0,691,692,5,118,0,0,692,693,5,97,0,0,693,694,
        5,114,0,0,694,695,5,97,0,0,695,696,5,114,0,0,696,697,5,103,0,0,697,
        698,5,115,0,0,698,125,1,0,0,0,699,700,5,58,0,0,700,701,5,58,0,0,
        701,127,1,0,0,0,702,703,5,43,0,0,703,129,1,0,0,0,704,705,5,45,0,
        0,705,131,1,0,0,0,706,707,5,42,0,0,707,133,1,0,0,0,708,709,5,47,
        0,0,709,135,1,0,0,0,710,711,5,37,0,0,711,137,1,0,0,0,712,713,5,43,
        0,0,713,714,5,43,0,0,714,139,1,0,0,0,715,716,5,45,0,0,716,717,5,
        45,0,0,717,141,1,0,0,0,718,719,5,60,0,0,719,720,5,60,0,0,720,143,
        1,0,0,0,721,722,5,62,0,0,722,723,5,62,0,0,723,145,1,0,0,0,724,725,
        5,60,0,0,725,147,1,0,0,0,726,727,5,62,0,0,727,149,1,0,0,0,728,729,
        5,60,0,0,729,730,5,61,0,0,730,151,1,0,0,0,731,732,5,62,0,0,732,733,
        5,61,0,0,733,153,1,0,0,0,734,735,5,61,0,0,735,736,5,61,0,0,736,155,
        1,0,0,0,737,738,5,33,0,0,738,739,5,61,0,0,739,157,1,0,0,0,740,741,
        5,38,0,0,741,159,1,0,0,0,742,743,5,124,0,0,743,161,1,0,0,0,744,745,
        5,94,0,0,745,163,1,0,0,0,746,747,5,33,0,0,747,165,1,0,0,0,748,749,
        5,126,0,0,749,167,1,0,0,0,750,751,5,38,0,0,751,752,5,38,0,0,752,
        169,1,0,0,0,753,754,5,124,0,0,754,755,5,124,0,0,755,171,1,0,0,0,
        756,757,5,63,0,0,757,173,1,0,0,0,758,759,5,58,0,0,759,175,1,0,0,
        0,760,761,5,59,0,0,761,177,1,0,0,0,762,763,5,44,0,0,763,179,1,0,
        0,0,764,765,5,46,0,0,765,766,5,46,0,0,766,767,5,46,0,0,767,181,1,
        0,0,0,768,769,5,46,0,0,769,770,5,46,0,0,770,183,1,0,0,0,771,772,
        5,46,0,0,772,185,1,0,0,0,773,774,5,61,0,0,774,187,1,0,0,0,775,776,
        5,43,0,0,776,777,5,61,0,0,777,189,1,0,0,0,778,779,5,45,0,0,779,780,
        5,61,0,0,780,191,1,0,0,0,781,782,5,42,0,0,782,783,5,61,0,0,783,193,
        1,0,0,0,784,785,5,47,0,0,785,786,5,61,0,0,786,195,1,0,0,0,787,788,
        5,37,0,0,788,789,5,61,0,0,789,197,1,0,0,0,790,791,5,124,0,0,791,
        792,5,124,0,0,792,793,5,61,0,0,793,199,1,0,0,0,794,795,5,38,0,0,
        795,796,5,38,0,0,796,797,5,61,0,0,797,201,1,0,0,0,798,799,5,38,0,
        0,799,800,5,61,0,0,800,203,1,0,0,0,801,802,5,124,0,0,802,803,5,61,
        0,0,803,205,1,0,0,0,804,805,5,94,0,0,805,806,5,61,0,0,806,207,1,
        0,0,0,807,808,5,60,0,0,808,809,5,60,0,0,809,810,5,61,0,0,810,209,
        1,0,0,0,811,812,5,62,0,0,812,813,5,62,0,0,813,814,5,61,0,0,814,211,
        1,0,0,0,815,819,5,40,0,0,816,818,7,0,0,0,817,816,1,0,0,0,818,821,
        1,0,0,0,819,817,1,0,0,0,819,820,1,0,0,0,820,822,1,0,0,0,821,819,
        1,0,0,0,822,823,5,91,0,0,823,213,1,0,0,0,824,825,5,45,0,0,825,826,
        5,62,0,0,826,215,1,0,0,0,827,828,5,40,0,0,828,217,1,0,0,0,829,830,
        5,41,0,0,830,219,1,0,0,0,831,832,5,123,0,0,832,221,1,0,0,0,833,834,
        5,125,0,0,834,223,1,0,0,0,835,836,5,91,0,0,836,225,1,0,0,0,837,838,
        5,93,0,0,838,227,1,0,0,0,839,840,5,92,0,0,840,229,1,0,0,0,841,843,
        7,1,0,0,842,841,1,0,0,0,843,231,1,0,0,0,844,851,7,2,0,0,845,847,
        5,95,0,0,846,845,1,0,0,0,846,847,1,0,0,0,847,848,1,0,0,0,848,850,
        7,2,0,0,849,846,1,0,0,0,850,853,1,0,0,0,851,849,1,0,0,0,851,852,
        1,0,0,0,852,233,1,0,0,0,853,851,1,0,0,0,854,856,7,2,0,0,855,854,
        1,0,0,0,856,859,1,0,0,0,857,855,1,0,0,0,857,858,1,0,0,0,858,860,
        1,0,0,0,859,857,1,0,0,0,860,862,5,46,0,0,861,863,7,2,0,0,862,861,
        1,0,0,0,863,864,1,0,0,0,864,862,1,0,0,0,864,865,1,0,0,0,865,875,
        1,0,0,0,866,868,7,3,0,0,867,869,7,4,0,0,868,867,1,0,0,0,868,869,
        1,0,0,0,869,871,1,0,0,0,870,872,7,2,0,0,871,870,1,0,0,0,872,873,
        1,0,0,0,873,871,1,0,0,0,873,874,1,0,0,0,874,876,1,0,0,0,875,866,
        1,0,0,0,875,876,1,0,0,0,876,235,1,0,0,0,877,878,5,48,0,0,878,880,
        7,5,0,0,879,881,3,230,113,0,880,879,1,0,0,0,881,882,1,0,0,0,882,
        880,1,0,0,0,882,883,1,0,0,0,883,237,1,0,0,0,884,886,5,64,0,0,885,
        887,5,64,0,0,886,885,1,0,0,0,886,887,1,0,0,0,887,888,1,0,0,0,888,
        892,7,6,0,0,889,891,7,7,0,0,890,889,1,0,0,0,891,894,1,0,0,0,892,
        890,1,0,0,0,892,893,1,0,0,0,893,895,1,0,0,0,894,892,1,0,0,0,895,
        896,6,117,0,0,896,897,4,117,3,0,897,898,1,0,0,0,898,899,6,117,1,
        0,899,239,1,0,0,0,900,901,5,34,0,0,901,902,1,0,0,0,902,903,6,118,
        2,0,903,241,1,0,0,0,904,906,5,98,0,0,905,904,1,0,0,0,905,906,1,0,
        0,0,906,907,1,0,0,0,907,911,3,240,118,0,908,910,3,272,134,0,909,
        908,1,0,0,0,910,913,1,0,0,0,911,909,1,0,0,0,911,912,1,0,0,0,912,
        914,1,0,0,0,913,911,1,0,0,0,914,915,3,274,135,0,915,243,1,0,0,0,
        916,920,5,39,0,0,917,921,8,8,0,0,918,919,5,92,0,0,919,921,9,0,0,
        0,920,917,1,0,0,0,920,918,1,0,0,0,921,922,1,0,0,0,922,923,5,39,0,
        0,923,245,1,0,0,0,924,925,5,39,0,0,925,929,7,6,0,0,926,928,7,7,0,
        0,927,926,1,0,0,0,928,931,1,0,0,0,929,927,1,0,0,0,929,930,1,0,0,
        0,930,942,1,0,0,0,931,929,1,0,0,0,932,933,5,58,0,0,933,934,5,58,
        0,0,934,935,1,0,0,0,935,939,7,6,0,0,936,938,7,7,0,0,937,936,1,0,
        0,0,938,941,1,0,0,0,939,937,1,0,0,0,939,940,1,0,0,0,940,943,1,0,
        0,0,941,939,1,0,0,0,942,932,1,0,0,0,942,943,1,0,0,0,943,247,1,0,
        0,0,944,945,5,39,0,0,945,249,1,0,0,0,946,947,5,108,0,0,947,948,5,
        111,0,0,948,949,5,97,0,0,949,950,5,100,0,0,950,951,5,95,0,0,951,
        952,5,111,0,0,952,953,5,98,0,0,953,954,5,106,0,0,954,955,5,101,0,
        0,955,956,5,99,0,0,956,957,5,116,0,0,957,251,1,0,0,0,958,962,7,6,
        0,0,959,961,7,7,0,0,960,959,1,0,0,0,961,964,1,0,0,0,962,960,1,0,
        0,0,962,963,1,0,0,0,963,253,1,0,0,0,964,962,1,0,0,0,965,966,5,47,
        0,0,966,967,5,42,0,0,967,971,1,0,0,0,968,970,9,0,0,0,969,968,1,0,
        0,0,970,973,1,0,0,0,971,972,1,0,0,0,971,969,1,0,0,0,972,974,1,0,
        0,0,973,971,1,0,0,0,974,975,5,42,0,0,975,976,5,47,0,0,976,977,1,
        0,0,0,977,978,6,125,3,0,978,255,1,0,0,0,979,980,5,47,0,0,980,981,
        5,47,0,0,981,985,1,0,0,0,982,984,9,0,0,0,983,982,1,0,0,0,984,987,
        1,0,0,0,985,986,1,0,0,0,985,983,1,0,0,0,986,989,1,0,0,0,987,985,
        1,0,0,0,988,990,7,9,0,0,989,988,1,0,0,0,990,991,1,0,0,0,991,992,
        6,126,3,0,992,257,1,0,0,0,993,997,3,48,22,0,994,996,7,10,0,0,995,
        994,1,0,0,0,996,999,1,0,0,0,997,995,1,0,0,0,997,998,1,0,0,0,998,
        1000,1,0,0,0,999,997,1,0,0,0,1000,1001,5,100,0,0,1001,1002,5,101,
        0,0,1002,1003,5,102,0,0,1003,1004,5,105,0,0,1004,1005,5,110,0,0,
        1005,1006,5,101,0,0,1006,1007,1,0,0,0,1007,1008,6,127,4,0,1008,259,
        1,0,0,0,1009,1011,7,0,0,0,1010,1009,1,0,0,0,1011,1012,1,0,0,0,1012,
        1010,1,0,0,0,1012,1013,1,0,0,0,1013,1014,1,0,0,0,1014,1015,6,128,
        5,0,1015,261,1,0,0,0,1016,1018,8,11,0,0,1017,1016,1,0,0,0,1018,1019,
        1,0,0,0,1019,1017,1,0,0,0,1019,1020,1,0,0,0,1020,1026,1,0,0,0,1021,
        1022,5,92,0,0,1022,1026,8,12,0,0,1023,1024,5,47,0,0,1024,1026,8,
        13,0,0,1025,1017,1,0,0,0,1025,1021,1,0,0,0,1025,1023,1,0,0,0,1026,
        1029,1,0,0,0,1027,1028,5,92,0,0,1028,1030,5,10,0,0,1029,1027,1,0,
        0,0,1029,1030,1,0,0,0,1030,1031,1,0,0,0,1031,1032,6,129,6,0,1032,
        263,1,0,0,0,1033,1034,5,92,0,0,1034,1035,5,10,0,0,1035,1036,1,0,
        0,0,1036,1037,6,130,6,0,1037,265,1,0,0,0,1038,1039,5,47,0,0,1039,
        1040,5,47,0,0,1040,1042,1,0,0,0,1041,1043,8,12,0,0,1042,1041,1,0,
        0,0,1043,1044,1,0,0,0,1044,1042,1,0,0,0,1044,1045,1,0,0,0,1045,1046,
        1,0,0,0,1046,1047,6,131,6,0,1047,267,1,0,0,0,1048,1049,5,47,0,0,
        1049,1050,5,42,0,0,1050,1054,1,0,0,0,1051,1055,8,14,0,0,1052,1053,
        5,42,0,0,1053,1055,8,15,0,0,1054,1051,1,0,0,0,1054,1052,1,0,0,0,
        1055,1056,1,0,0,0,1056,1057,1,0,0,0,1056,1054,1,0,0,0,1057,1059,
        1,0,0,0,1058,1060,5,42,0,0,1059,1058,1,0,0,0,1060,1061,1,0,0,0,1061,
        1059,1,0,0,0,1061,1062,1,0,0,0,1062,1063,1,0,0,0,1063,1064,5,47,
        0,0,1064,1065,1,0,0,0,1065,1066,6,132,6,0,1066,269,1,0,0,0,1067,
        1069,7,9,0,0,1068,1067,1,0,0,0,1069,1070,1,0,0,0,1070,1071,6,133,
        7,0,1071,271,1,0,0,0,1072,1077,8,16,0,0,1073,1077,5,10,0,0,1074,
        1075,5,92,0,0,1075,1077,9,0,0,0,1076,1072,1,0,0,0,1076,1073,1,0,
        0,0,1076,1074,1,0,0,0,1077,1078,1,0,0,0,1078,1079,6,134,6,0,1079,
        273,1,0,0,0,1080,1081,5,34,0,0,1081,1082,1,0,0,0,1082,1083,6,135,
        8,0,1083,275,1,0,0,0,1084,1086,8,17,0,0,1085,1084,1,0,0,0,1086,1087,
        1,0,0,0,1087,1085,1,0,0,0,1087,1088,1,0,0,0,1088,1089,1,0,0,0,1089,
        1090,4,136,4,0,1090,1091,1,0,0,0,1091,1092,6,136,6,0,1092,277,1,
        0,0,0,1093,1095,7,17,0,0,1094,1093,1,0,0,0,1095,1096,1,0,0,0,1096,
        1094,1,0,0,0,1096,1097,1,0,0,0,1097,1101,1,0,0,0,1098,1100,7,10,
        0,0,1099,1098,1,0,0,0,1100,1103,1,0,0,0,1101,1099,1,0,0,0,1101,1102,
        1,0,0,0,1102,1111,1,0,0,0,1103,1101,1,0,0,0,1104,1108,7,6,0,0,1105,
        1107,7,7,0,0,1106,1105,1,0,0,0,1107,1110,1,0,0,0,1108,1106,1,0,0,
        0,1108,1109,1,0,0,0,1109,1112,1,0,0,0,1110,1108,1,0,0,0,1111,1104,
        1,0,0,0,1112,1113,1,0,0,0,1113,1111,1,0,0,0,1113,1114,1,0,0,0,1114,
        1115,1,0,0,0,1115,1116,4,137,5,0,1116,1117,1,0,0,0,1117,1118,6,137,
        8,0,1118,279,1,0,0,0,1119,1121,7,0,0,0,1120,1119,1,0,0,0,1121,1122,
        1,0,0,0,1122,1120,1,0,0,0,1122,1123,1,0,0,0,1123,1124,1,0,0,0,1124,
        1125,6,138,6,0,1125,281,1,0,0,0,43,0,1,2,3,819,842,846,851,857,864,
        868,873,875,882,886,892,905,911,920,929,939,942,962,971,985,989,
        997,1012,1019,1025,1029,1044,1054,1056,1061,1068,1076,1087,1096,
        1101,1108,1113,1122,9,1,117,0,2,3,0,2,2,0,0,2,0,5,1,0,0,1,0,3,0,
        0,4,0,0,2,0,0
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!LPCLexer.__ATN) {
            LPCLexer.__ATN = new antlr.ATNDeserializer().deserialize(LPCLexer._serializedATN);
        }

        return LPCLexer.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(LPCLexer.literalNames, LPCLexer.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return LPCLexer.vocabulary;
    }

    private static readonly decisionsToDFA = LPCLexer._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}