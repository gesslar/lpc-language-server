// Generated from grammar/LPCLexer.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

 
    import {LPCLexerBase} from "./LPCLexerBase";


export class LPCLexer extends LPCLexerBase {
    public static readonly BREAK = 1;
    public static readonly BUFFER = 2;
    public static readonly BYTES = 3;
    public static readonly CASE = 4;
    public static readonly CATCH = 5;
    public static readonly CHAR = 6;
    public static readonly CLASS = 7;
    public static readonly CLOSURE = 8;
    public static readonly CONST = 9;
    public static readonly CONTINUE = 10;
    public static readonly COROUTINE = 11;
    public static readonly DEFAULT = 12;
    public static readonly DO = 13;
    public static readonly ECHO = 14;
    public static readonly ELSE = 15;
    public static readonly ELIF = 16;
    public static readonly ENDIF = 17;
    public static readonly ENUM = 18;
    public static readonly FLOAT = 19;
    public static readonly FOR = 20;
    public static readonly FOREACH = 21;
    public static readonly FUNCTIONS = 22;
    public static readonly FUNCTION = 23;
    public static readonly HASH = 24;
    public static readonly IF = 25;
    public static readonly IFDEF = 26;
    public static readonly IFNDEF = 27;
    public static readonly IN = 28;
    public static readonly INCLUDE = 29;
    public static readonly INHERIT = 30;
    public static readonly INT = 31;
    public static readonly LINE = 32;
    public static readonly LPCTYPE = 33;
    public static readonly LWOBJECT = 34;
    public static readonly MAPPING = 35;
    public static readonly MIXED = 36;
    public static readonly OBJECT = 37;
    public static readonly PRAGMA = 38;
    public static readonly QUOTEDARRAY = 39;
    public static readonly RETURN = 40;
    public static readonly REF = 41;
    public static readonly STATUS = 42;
    public static readonly STRUCTS = 43;
    public static readonly STRUCT = 44;
    public static readonly STRING = 45;
    public static readonly SYMBOL = 46;
    public static readonly SWITCH = 47;
    public static readonly TYPEDEF = 48;
    public static readonly UNDEF = 49;
    public static readonly VARIABLES = 50;
    public static readonly VIRTUAL = 51;
    public static readonly VOID = 52;
    public static readonly VOLATILE = 53;
    public static readonly WHILE = 54;
    public static readonly UNKNOWN = 55;
    public static readonly DEPRECATED = 56;
    public static readonly PRIVATE = 57;
    public static readonly PROTECTED = 58;
    public static readonly PUBLIC = 59;
    public static readonly STATIC = 60;
    public static readonly VISIBLE = 61;
    public static readonly NOSHADOW = 62;
    public static readonly NOSAVE = 63;
    public static readonly NOMASK = 64;
    public static readonly VARARGS = 65;
    public static readonly SUPER_ACCESSOR = 66;
    public static readonly PLUS = 67;
    public static readonly MINUS = 68;
    public static readonly STAR = 69;
    public static readonly DIV = 70;
    public static readonly MOD = 71;
    public static readonly INC = 72;
    public static readonly DEC = 73;
    public static readonly SHL = 74;
    public static readonly SHR = 75;
    public static readonly LT = 76;
    public static readonly GT = 77;
    public static readonly LE = 78;
    public static readonly GE = 79;
    public static readonly EQ = 80;
    public static readonly NE = 81;
    public static readonly AND = 82;
    public static readonly OR = 83;
    public static readonly XOR = 84;
    public static readonly NOT = 85;
    public static readonly BNOT = 86;
    public static readonly AND_AND = 87;
    public static readonly OR_OR = 88;
    public static readonly QUESTION = 89;
    public static readonly COLON = 90;
    public static readonly SEMI = 91;
    public static readonly COMMA = 92;
    public static readonly TRIPPLEDOT = 93;
    public static readonly DOUBLEDOT = 94;
    public static readonly DOT = 95;
    public static readonly ASSIGN = 96;
    public static readonly ADD_ASSIGN = 97;
    public static readonly SUB_ASSIGN = 98;
    public static readonly MUL_ASSIGN = 99;
    public static readonly DIV_ASSIGN = 100;
    public static readonly MOD_ASSIGN = 101;
    public static readonly OR_ASSIGN = 102;
    public static readonly AND_ASSIGN = 103;
    public static readonly BITAND_ASSIGN = 104;
    public static readonly BITOR_ASSIGN = 105;
    public static readonly XOR_ASSIGN = 106;
    public static readonly SHL_ASSIGN = 107;
    public static readonly RSH_ASSIGN = 108;
    public static readonly MAPPING_OPEN = 109;
    public static readonly ARROW = 110;
    public static readonly PAREN_OPEN = 111;
    public static readonly PAREN_CLOSE = 112;
    public static readonly CURLY_OPEN = 113;
    public static readonly CURLY_CLOSE = 114;
    public static readonly SQUARE_OPEN = 115;
    public static readonly SQUARE_CLOSE = 116;
    public static readonly BACKSLASH = 117;
    public static readonly IntegerConstant = 118;
    public static readonly FloatingConstant = 119;
    public static readonly HexIntConstant = 120;
    public static readonly TextFormatDirective = 121;
    public static readonly STRING_START = 122;
    public static readonly StringLiteral = 123;
    public static readonly CharacterConstant = 124;
    public static readonly LAMBDA_IDENTIFIER = 125;
    public static readonly SINGLEQUOT = 126;
    public static readonly BracketedIdentifier = 127;
    public static readonly Identifier = 128;
    public static readonly COMMENT = 129;
    public static readonly LINE_COMMENT = 130;
    public static readonly DEFINE = 131;
    public static readonly WS = 132;
    public static readonly END_DEFINE = 133;
    public static readonly STRING_END = 134;
    public static readonly TEXT_FORMAT_END = 135;
    public static readonly DEFINE_MODE = 1;
    public static readonly STRING_MODE = 2;
    public static readonly TEXT_FORMAT_MODE = 3;

    public static readonly channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN", "COMMENTS_CHANNEL", "DIRECTIVE_CHANNEL", 
                                           "DISABLED_CHANNEL"
    ];

    public static readonly literalNames = [
        null, "'break'", "'buffer'", "'bytes'", "'case'", "'catch'", "'char'", 
        "'class'", "'closure'", "'const'", "'continue'", "'coroutine'", 
        "'default'", "'do'", "'#echo'", "'else'", "'elif'", "'endif'", "'enum'", 
        "'float'", "'for'", "'foreach'", "'functions'", "'function'", "'#'", 
        "'if'", "'ifdef'", "'ifndef'", "'in'", "'include'", "'inherit'", 
        "'int'", "'#line'", "'lpctype'", "'lwobject'", "'mapping'", "'mixed'", 
        "'object'", "'pragma'", "'quotedarray'", "'return'", "'ref'", "'status'", 
        "'structs'", "'struct'", "'string'", "'symbol'", "'switch'", "'typedef'", 
        "'undef'", "'variables'", "'virtual'", "'void'", "'volatile'", "'while'", 
        "'unknown'", "'deprecated'", "'private'", "'protected'", "'public'", 
        "'static'", "'visible'", "'noshadow'", "'nosave'", "'nomask'", "'varargs'", 
        "'::'", "'+'", "'-'", "'*'", "'/'", "'%'", "'++'", "'--'", "'<<'", 
        "'>>'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'&'", "'|'", 
        "'^'", "'!'", "'~'", "'&&'", "'||'", "'?'", "':'", "';'", "','", 
        "'...'", "'..'", "'.'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", 
        "'||='", "'&&='", "'&='", "'|='", "'^='", "'<<='", "'>>='", null, 
        "'->'", "'('", "')'", "'{'", "'}'", "'['", "']'", "'\\'", null, 
        null, null, null, null, null, null, null, "'''"
    ];

    public static readonly symbolicNames = [
        null, "BREAK", "BUFFER", "BYTES", "CASE", "CATCH", "CHAR", "CLASS", 
        "CLOSURE", "CONST", "CONTINUE", "COROUTINE", "DEFAULT", "DO", "ECHO", 
        "ELSE", "ELIF", "ENDIF", "ENUM", "FLOAT", "FOR", "FOREACH", "FUNCTIONS", 
        "FUNCTION", "HASH", "IF", "IFDEF", "IFNDEF", "IN", "INCLUDE", "INHERIT", 
        "INT", "LINE", "LPCTYPE", "LWOBJECT", "MAPPING", "MIXED", "OBJECT", 
        "PRAGMA", "QUOTEDARRAY", "RETURN", "REF", "STATUS", "STRUCTS", "STRUCT", 
        "STRING", "SYMBOL", "SWITCH", "TYPEDEF", "UNDEF", "VARIABLES", "VIRTUAL", 
        "VOID", "VOLATILE", "WHILE", "UNKNOWN", "DEPRECATED", "PRIVATE", 
        "PROTECTED", "PUBLIC", "STATIC", "VISIBLE", "NOSHADOW", "NOSAVE", 
        "NOMASK", "VARARGS", "SUPER_ACCESSOR", "PLUS", "MINUS", "STAR", 
        "DIV", "MOD", "INC", "DEC", "SHL", "SHR", "LT", "GT", "LE", "GE", 
        "EQ", "NE", "AND", "OR", "XOR", "NOT", "BNOT", "AND_AND", "OR_OR", 
        "QUESTION", "COLON", "SEMI", "COMMA", "TRIPPLEDOT", "DOUBLEDOT", 
        "DOT", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
        "MOD_ASSIGN", "OR_ASSIGN", "AND_ASSIGN", "BITAND_ASSIGN", "BITOR_ASSIGN", 
        "XOR_ASSIGN", "SHL_ASSIGN", "RSH_ASSIGN", "MAPPING_OPEN", "ARROW", 
        "PAREN_OPEN", "PAREN_CLOSE", "CURLY_OPEN", "CURLY_CLOSE", "SQUARE_OPEN", 
        "SQUARE_CLOSE", "BACKSLASH", "IntegerConstant", "FloatingConstant", 
        "HexIntConstant", "TextFormatDirective", "STRING_START", "StringLiteral", 
        "CharacterConstant", "LAMBDA_IDENTIFIER", "SINGLEQUOT", "BracketedIdentifier", 
        "Identifier", "COMMENT", "LINE_COMMENT", "DEFINE", "WS", "END_DEFINE", 
        "STRING_END", "TEXT_FORMAT_END"
    ];

    public static readonly modeNames = [
        "DEFAULT_MODE", "DEFINE_MODE", "STRING_MODE", "TEXT_FORMAT_MODE",
    ];

    public static readonly ruleNames = [
        "BREAK", "BUFFER", "BYTES", "CASE", "CATCH", "CHAR", "CLASS", "CLOSURE", 
        "CONST", "CONTINUE", "COROUTINE", "DEFAULT", "DO", "ECHO", "ELSE", 
        "ELIF", "ENDIF", "ENUM", "FLOAT", "FOR", "FOREACH", "FUNCTIONS", 
        "FUNCTION", "HASH", "IF", "IFDEF", "IFNDEF", "IN", "INCLUDE", "INHERIT", 
        "INT", "LINE", "LPCTYPE", "LWOBJECT", "MAPPING", "MIXED", "OBJECT", 
        "PRAGMA", "QUOTEDARRAY", "RETURN", "REF", "STATUS", "STRUCTS", "STRUCT", 
        "STRING", "SYMBOL", "SWITCH", "TYPEDEF", "UNDEF", "VARIABLES", "VIRTUAL", 
        "VOID", "VOLATILE", "WHILE", "UNKNOWN", "DEPRECATED", "PRIVATE", 
        "PROTECTED", "PUBLIC", "STATIC", "VISIBLE", "NOSHADOW", "NOSAVE", 
        "NOMASK", "VARARGS", "SUPER_ACCESSOR", "PLUS", "MINUS", "STAR", 
        "DIV", "MOD", "INC", "DEC", "SHL", "SHR", "LT", "GT", "LE", "GE", 
        "EQ", "NE", "AND", "OR", "XOR", "NOT", "BNOT", "AND_AND", "OR_OR", 
        "QUESTION", "COLON", "SEMI", "COMMA", "TRIPPLEDOT", "DOUBLEDOT", 
        "DOT", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
        "MOD_ASSIGN", "OR_ASSIGN", "AND_ASSIGN", "BITAND_ASSIGN", "BITOR_ASSIGN", 
        "XOR_ASSIGN", "SHL_ASSIGN", "RSH_ASSIGN", "MAPPING_OPEN", "ARROW", 
        "PAREN_OPEN", "PAREN_CLOSE", "CURLY_OPEN", "CURLY_CLOSE", "SQUARE_OPEN", 
        "SQUARE_CLOSE", "BACKSLASH", "HexDigit", "IntegerConstant", "FloatingConstant", 
        "HexIntConstant", "TextFormatDirective", "STRING_START", "StringLiteral", 
        "CharacterConstant", "LAMBDA_IDENTIFIER", "SINGLEQUOT", "BracketedIdentifier", 
        "Identifier", "COMMENT", "LINE_COMMENT", "DEFINE", "WS", "DEFINE_CONTENT", 
        "NEWLINE", "DEFINE_COMMENT", "DEFINE_BLOCK_COMMENT", "END_DEFINE", 
        "STRING_CONTENT", "STRING_END", "TEXT_FORMAT_CONTENT", "TEXT_FORMAT_END", 
        "TEXT_FORMAT_WS",
    ];

        
        _textMark = "";


    public constructor(input: antlr.CharStream) {
        super(input);
        this.interpreter = new antlr.LexerATNSimulator(this, LPCLexer._ATN, LPCLexer.decisionsToDFA, new antlr.PredictionContextCache());
    }

    public get grammarFileName(): string { return "LPCLexer.g4"; }

    public get literalNames(): (string | null)[] { return LPCLexer.literalNames; }
    public get symbolicNames(): (string | null)[] { return LPCLexer.symbolicNames; }
    public get ruleNames(): string[] { return LPCLexer.ruleNames; }

    public get serializedATN(): number[] { return LPCLexer._serializedATN; }

    public get channelNames(): string[] { return LPCLexer.channelNames; }

    public get modeNames(): string[] { return LPCLexer.modeNames; }

    public override action(localContext: antlr.ParserRuleContext | null, ruleIndex: number, actionIndex: number): void {
        switch (ruleIndex) {
        case 121:
            this.TextFormatDirective_action(localContext, actionIndex);
            break;
        }
    }
    private TextFormatDirective_action(localContext: antlr.ParserRuleContext | null, actionIndex: number): void {
        switch (actionIndex) {
        case 0:
             this._textMark = this.text.substring(this.text.startsWith("@@") ? 2 : 1); 
            break;
        }
    }
    public override sempred(localContext: antlr.ParserRuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 1:
            return this.BUFFER_sempred(localContext, predIndex);
        case 6:
            return this.CLASS_sempred(localContext, predIndex);
        case 10:
            return this.COROUTINE_sempred(localContext, predIndex);
        case 32:
            return this.LPCTYPE_sempred(localContext, predIndex);
        case 38:
            return this.QUOTEDARRAY_sempred(localContext, predIndex);
        case 40:
            return this.REF_sempred(localContext, predIndex);
        case 41:
            return this.STATUS_sempred(localContext, predIndex);
        case 121:
            return this.TextFormatDirective_sempred(localContext, predIndex);
        case 140:
            return this.TEXT_FORMAT_CONTENT_sempred(localContext, predIndex);
        case 141:
            return this.TEXT_FORMAT_END_sempred(localContext, predIndex);
        }
        return true;
    }
    private BUFFER_sempred(localContext: antlr.ParserRuleContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return  this.isFluff() ;
        }
        return true;
    }
    private CLASS_sempred(localContext: antlr.ParserRuleContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 1:
            return  this.isFluff() ;
        }
        return true;
    }
    private COROUTINE_sempred(localContext: antlr.ParserRuleContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 2:
            return  this.isLD() ;
        }
        return true;
    }
    private LPCTYPE_sempred(localContext: antlr.ParserRuleContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 3:
            return  this.isLD() ;
        }
        return true;
    }
    private QUOTEDARRAY_sempred(localContext: antlr.ParserRuleContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 4:
            return  this.isLD() ;
        }
        return true;
    }
    private REF_sempred(localContext: antlr.ParserRuleContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 5:
            return  this.isFluff() ;
        }
        return true;
    }
    private STATUS_sempred(localContext: antlr.ParserRuleContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 6:
            return  this.isLD() ;
        }
        return true;
    }
    private TextFormatDirective_sempred(localContext: antlr.ParserRuleContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 7:
            return  this.isFluff() ;
        }
        return true;
    }
    private TEXT_FORMAT_CONTENT_sempred(localContext: antlr.ParserRuleContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 8:
            return  this.text.trim() != this._textMark ;
        }
        return true;
    }
    private TEXT_FORMAT_END_sempred(localContext: antlr.ParserRuleContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 9:
            return  this.text.trim() == this._textMark ;
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,0,135,1192,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,
        2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,
        11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,
        18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,
        24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
        31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,
        37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,
        44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,
        50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,
        57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
        63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,
        70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,
        76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,
        83,7,83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,
        89,2,90,7,90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,
        96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,
        102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,
        7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,2,112,7,112,
        2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,2,118,
        7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
        2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,
        7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
        2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
        7,140,2,141,7,141,2,142,7,142,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,
        3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,
        8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,
        1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,
        1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,
        1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,
        1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,
        1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,
        1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,
        1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
        1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,
        1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,
        1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,
        1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,
        1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,
        1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
        1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,59,
        1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,
        1,61,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,63,
        1,63,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
        1,64,1,65,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,
        1,70,1,71,1,71,1,71,1,72,1,72,1,72,1,73,1,73,1,73,1,74,1,74,1,74,
        1,75,1,75,1,76,1,76,1,77,1,77,1,77,1,78,1,78,1,78,1,79,1,79,1,79,
        1,80,1,80,1,80,1,81,1,81,1,82,1,82,1,83,1,83,1,84,1,84,1,85,1,85,
        1,86,1,86,1,86,1,87,1,87,1,87,1,88,1,88,1,89,1,89,1,90,1,90,1,91,
        1,91,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,94,1,94,1,95,1,95,1,96,
        1,96,1,96,1,97,1,97,1,97,1,98,1,98,1,98,1,99,1,99,1,99,1,100,1,100,
        1,100,1,101,1,101,1,101,1,101,1,102,1,102,1,102,1,102,1,103,1,103,
        1,103,1,104,1,104,1,104,1,105,1,105,1,105,1,106,1,106,1,106,1,106,
        1,107,1,107,1,107,1,107,1,108,1,108,5,108,872,8,108,10,108,12,108,
        875,9,108,1,108,1,108,1,109,1,109,1,109,1,110,1,110,1,111,1,111,
        1,112,1,112,1,113,1,113,1,114,1,114,1,115,1,115,1,116,1,116,1,117,
        3,117,897,8,117,1,118,1,118,3,118,901,8,118,1,118,5,118,904,8,118,
        10,118,12,118,907,9,118,1,119,1,119,3,119,911,8,119,1,119,5,119,
        914,8,119,10,119,12,119,917,9,119,1,119,1,119,4,119,921,8,119,11,
        119,12,119,922,1,119,1,119,3,119,927,8,119,1,119,4,119,930,8,119,
        11,119,12,119,931,3,119,934,8,119,1,120,1,120,1,120,4,120,939,8,
        120,11,120,12,120,940,1,121,1,121,3,121,945,8,121,1,121,1,121,5,
        121,949,8,121,10,121,12,121,952,9,121,1,121,1,121,1,121,1,121,1,
        121,1,122,1,122,1,122,1,122,1,123,3,123,964,8,123,1,123,1,123,5,
        123,968,8,123,10,123,12,123,971,9,123,1,123,1,123,1,124,1,124,1,
        124,1,124,3,124,979,8,124,1,124,1,124,1,125,1,125,1,125,5,125,986,
        8,125,10,125,12,125,989,9,125,1,125,1,125,1,125,1,125,1,125,5,125,
        996,8,125,10,125,12,125,999,9,125,3,125,1001,8,125,1,126,1,126,1,
        127,1,127,1,127,5,127,1008,8,127,10,127,12,127,1011,9,127,1,127,
        1,127,1,128,1,128,5,128,1017,8,128,10,128,12,128,1020,9,128,1,129,
        1,129,1,129,1,129,5,129,1026,8,129,10,129,12,129,1029,9,129,1,129,
        1,129,1,129,1,129,1,129,1,130,1,130,1,130,1,130,5,130,1040,8,130,
        10,130,12,130,1043,9,130,1,130,3,130,1046,8,130,1,130,1,130,1,131,
        1,131,5,131,1052,8,131,10,131,12,131,1055,9,131,1,131,1,131,1,131,
        1,131,1,131,1,131,1,131,1,131,1,131,1,132,4,132,1067,8,132,11,132,
        12,132,1068,1,132,1,132,1,133,4,133,1074,8,133,11,133,12,133,1075,
        1,133,1,133,1,133,1,133,3,133,1082,8,133,1,133,1,133,3,133,1086,
        8,133,1,133,3,133,1089,8,133,1,133,1,133,1,134,1,134,3,134,1095,
        8,134,1,134,1,134,1,134,1,134,1,135,1,135,1,135,1,135,4,135,1105,
        8,135,11,135,12,135,1106,1,135,1,135,1,136,1,136,1,136,1,136,1,136,
        1,136,4,136,1117,8,136,11,136,12,136,1118,1,136,4,136,1122,8,136,
        11,136,12,136,1123,1,136,1,136,1,136,1,136,1,137,3,137,1131,8,137,
        1,137,1,137,1,138,1,138,1,138,1,138,3,138,1139,8,138,1,138,1,138,
        1,139,1,139,1,139,1,139,1,140,4,140,1148,8,140,11,140,12,140,1149,
        1,140,1,140,1,140,1,140,1,141,4,141,1157,8,141,11,141,12,141,1158,
        1,141,5,141,1162,8,141,10,141,12,141,1165,9,141,4,141,1167,8,141,
        11,141,12,141,1168,1,141,1,141,5,141,1173,8,141,10,141,12,141,1176,
        9,141,4,141,1178,8,141,11,141,12,141,1179,1,141,1,141,1,141,1,141,
        1,142,4,142,1187,8,142,11,142,12,142,1188,1,142,1,142,3,1027,1041,
        1118,0,143,4,1,6,2,8,3,10,4,12,5,14,6,16,7,18,8,20,9,22,10,24,11,
        26,12,28,13,30,14,32,15,34,16,36,17,38,18,40,19,42,20,44,21,46,22,
        48,23,50,24,52,25,54,26,56,27,58,28,60,29,62,30,64,31,66,32,68,33,
        70,34,72,35,74,36,76,37,78,38,80,39,82,40,84,41,86,42,88,43,90,44,
        92,45,94,46,96,47,98,48,100,49,102,50,104,51,106,52,108,53,110,54,
        112,55,114,56,116,57,118,58,120,59,122,60,124,61,126,62,128,63,130,
        64,132,65,134,66,136,67,138,68,140,69,142,70,144,71,146,72,148,73,
        150,74,152,75,154,76,156,77,158,78,160,79,162,80,164,81,166,82,168,
        83,170,84,172,85,174,86,176,87,178,88,180,89,182,90,184,91,186,92,
        188,93,190,94,192,95,194,96,196,97,198,98,200,99,202,100,204,101,
        206,102,208,103,210,104,212,105,214,106,216,107,218,108,220,109,
        222,110,224,111,226,112,228,113,230,114,232,115,234,116,236,117,
        238,0,240,118,242,119,244,120,246,121,248,122,250,123,252,124,254,
        125,256,126,258,127,260,128,262,129,264,130,266,131,268,132,270,
        0,272,0,274,0,276,0,278,133,280,0,282,134,284,0,286,135,288,0,4,
        0,1,2,3,19,3,0,9,10,13,13,32,32,3,0,48,57,65,70,97,102,1,0,48,57,
        2,0,69,69,101,101,2,0,43,43,45,45,2,0,88,88,120,120,4,0,36,36,65,
        90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,4,0,10,10,13,13,39,
        39,92,92,4,0,46,57,65,90,95,95,97,122,1,1,10,10,2,0,9,9,32,32,3,
        0,10,10,47,47,92,92,2,0,10,10,13,13,2,0,42,42,47,47,1,0,10,10,1,
        0,42,42,1,0,47,47,3,0,10,10,34,34,92,92,1230,0,4,1,0,0,0,0,6,1,0,
        0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,0,16,1,0,
        0,0,0,18,1,0,0,0,0,20,1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,0,26,1,0,
        0,0,0,28,1,0,0,0,0,30,1,0,0,0,0,32,1,0,0,0,0,34,1,0,0,0,0,36,1,0,
        0,0,0,38,1,0,0,0,0,40,1,0,0,0,0,42,1,0,0,0,0,44,1,0,0,0,0,46,1,0,
        0,0,0,48,1,0,0,0,0,50,1,0,0,0,0,52,1,0,0,0,0,54,1,0,0,0,0,56,1,0,
        0,0,0,58,1,0,0,0,0,60,1,0,0,0,0,62,1,0,0,0,0,64,1,0,0,0,0,66,1,0,
        0,0,0,68,1,0,0,0,0,70,1,0,0,0,0,72,1,0,0,0,0,74,1,0,0,0,0,76,1,0,
        0,0,0,78,1,0,0,0,0,80,1,0,0,0,0,82,1,0,0,0,0,84,1,0,0,0,0,86,1,0,
        0,0,0,88,1,0,0,0,0,90,1,0,0,0,0,92,1,0,0,0,0,94,1,0,0,0,0,96,1,0,
        0,0,0,98,1,0,0,0,0,100,1,0,0,0,0,102,1,0,0,0,0,104,1,0,0,0,0,106,
        1,0,0,0,0,108,1,0,0,0,0,110,1,0,0,0,0,112,1,0,0,0,0,114,1,0,0,0,
        0,116,1,0,0,0,0,118,1,0,0,0,0,120,1,0,0,0,0,122,1,0,0,0,0,124,1,
        0,0,0,0,126,1,0,0,0,0,128,1,0,0,0,0,130,1,0,0,0,0,132,1,0,0,0,0,
        134,1,0,0,0,0,136,1,0,0,0,0,138,1,0,0,0,0,140,1,0,0,0,0,142,1,0,
        0,0,0,144,1,0,0,0,0,146,1,0,0,0,0,148,1,0,0,0,0,150,1,0,0,0,0,152,
        1,0,0,0,0,154,1,0,0,0,0,156,1,0,0,0,0,158,1,0,0,0,0,160,1,0,0,0,
        0,162,1,0,0,0,0,164,1,0,0,0,0,166,1,0,0,0,0,168,1,0,0,0,0,170,1,
        0,0,0,0,172,1,0,0,0,0,174,1,0,0,0,0,176,1,0,0,0,0,178,1,0,0,0,0,
        180,1,0,0,0,0,182,1,0,0,0,0,184,1,0,0,0,0,186,1,0,0,0,0,188,1,0,
        0,0,0,190,1,0,0,0,0,192,1,0,0,0,0,194,1,0,0,0,0,196,1,0,0,0,0,198,
        1,0,0,0,0,200,1,0,0,0,0,202,1,0,0,0,0,204,1,0,0,0,0,206,1,0,0,0,
        0,208,1,0,0,0,0,210,1,0,0,0,0,212,1,0,0,0,0,214,1,0,0,0,0,216,1,
        0,0,0,0,218,1,0,0,0,0,220,1,0,0,0,0,222,1,0,0,0,0,224,1,0,0,0,0,
        226,1,0,0,0,0,228,1,0,0,0,0,230,1,0,0,0,0,232,1,0,0,0,0,234,1,0,
        0,0,0,236,1,0,0,0,0,240,1,0,0,0,0,242,1,0,0,0,0,244,1,0,0,0,0,246,
        1,0,0,0,0,248,1,0,0,0,0,250,1,0,0,0,0,252,1,0,0,0,0,254,1,0,0,0,
        0,256,1,0,0,0,0,258,1,0,0,0,0,260,1,0,0,0,0,262,1,0,0,0,0,264,1,
        0,0,0,0,266,1,0,0,0,0,268,1,0,0,0,1,270,1,0,0,0,1,272,1,0,0,0,1,
        274,1,0,0,0,1,276,1,0,0,0,1,278,1,0,0,0,2,280,1,0,0,0,2,282,1,0,
        0,0,3,284,1,0,0,0,3,286,1,0,0,0,3,288,1,0,0,0,4,290,1,0,0,0,6,296,
        1,0,0,0,8,305,1,0,0,0,10,311,1,0,0,0,12,316,1,0,0,0,14,322,1,0,0,
        0,16,327,1,0,0,0,18,335,1,0,0,0,20,343,1,0,0,0,22,349,1,0,0,0,24,
        358,1,0,0,0,26,370,1,0,0,0,28,378,1,0,0,0,30,381,1,0,0,0,32,387,
        1,0,0,0,34,392,1,0,0,0,36,397,1,0,0,0,38,403,1,0,0,0,40,408,1,0,
        0,0,42,414,1,0,0,0,44,418,1,0,0,0,46,426,1,0,0,0,48,436,1,0,0,0,
        50,445,1,0,0,0,52,447,1,0,0,0,54,450,1,0,0,0,56,456,1,0,0,0,58,463,
        1,0,0,0,60,466,1,0,0,0,62,474,1,0,0,0,64,482,1,0,0,0,66,486,1,0,
        0,0,68,492,1,0,0,0,70,502,1,0,0,0,72,511,1,0,0,0,74,519,1,0,0,0,
        76,525,1,0,0,0,78,532,1,0,0,0,80,539,1,0,0,0,82,553,1,0,0,0,84,560,
        1,0,0,0,86,566,1,0,0,0,88,575,1,0,0,0,90,583,1,0,0,0,92,590,1,0,
        0,0,94,597,1,0,0,0,96,604,1,0,0,0,98,611,1,0,0,0,100,619,1,0,0,0,
        102,625,1,0,0,0,104,635,1,0,0,0,106,643,1,0,0,0,108,648,1,0,0,0,
        110,657,1,0,0,0,112,663,1,0,0,0,114,671,1,0,0,0,116,682,1,0,0,0,
        118,690,1,0,0,0,120,700,1,0,0,0,122,707,1,0,0,0,124,714,1,0,0,0,
        126,722,1,0,0,0,128,731,1,0,0,0,130,738,1,0,0,0,132,745,1,0,0,0,
        134,753,1,0,0,0,136,756,1,0,0,0,138,758,1,0,0,0,140,760,1,0,0,0,
        142,762,1,0,0,0,144,764,1,0,0,0,146,766,1,0,0,0,148,769,1,0,0,0,
        150,772,1,0,0,0,152,775,1,0,0,0,154,778,1,0,0,0,156,780,1,0,0,0,
        158,782,1,0,0,0,160,785,1,0,0,0,162,788,1,0,0,0,164,791,1,0,0,0,
        166,794,1,0,0,0,168,796,1,0,0,0,170,798,1,0,0,0,172,800,1,0,0,0,
        174,802,1,0,0,0,176,804,1,0,0,0,178,807,1,0,0,0,180,810,1,0,0,0,
        182,812,1,0,0,0,184,814,1,0,0,0,186,816,1,0,0,0,188,818,1,0,0,0,
        190,822,1,0,0,0,192,825,1,0,0,0,194,827,1,0,0,0,196,829,1,0,0,0,
        198,832,1,0,0,0,200,835,1,0,0,0,202,838,1,0,0,0,204,841,1,0,0,0,
        206,844,1,0,0,0,208,848,1,0,0,0,210,852,1,0,0,0,212,855,1,0,0,0,
        214,858,1,0,0,0,216,861,1,0,0,0,218,865,1,0,0,0,220,869,1,0,0,0,
        222,878,1,0,0,0,224,881,1,0,0,0,226,883,1,0,0,0,228,885,1,0,0,0,
        230,887,1,0,0,0,232,889,1,0,0,0,234,891,1,0,0,0,236,893,1,0,0,0,
        238,896,1,0,0,0,240,898,1,0,0,0,242,908,1,0,0,0,244,935,1,0,0,0,
        246,942,1,0,0,0,248,958,1,0,0,0,250,963,1,0,0,0,252,974,1,0,0,0,
        254,982,1,0,0,0,256,1002,1,0,0,0,258,1004,1,0,0,0,260,1014,1,0,0,
        0,262,1021,1,0,0,0,264,1035,1,0,0,0,266,1049,1,0,0,0,268,1066,1,
        0,0,0,270,1081,1,0,0,0,272,1092,1,0,0,0,274,1100,1,0,0,0,276,1110,
        1,0,0,0,278,1130,1,0,0,0,280,1138,1,0,0,0,282,1142,1,0,0,0,284,1147,
        1,0,0,0,286,1166,1,0,0,0,288,1186,1,0,0,0,290,291,5,98,0,0,291,292,
        5,114,0,0,292,293,5,101,0,0,293,294,5,97,0,0,294,295,5,107,0,0,295,
        5,1,0,0,0,296,297,5,98,0,0,297,298,5,117,0,0,298,299,5,102,0,0,299,
        300,5,102,0,0,300,301,5,101,0,0,301,302,5,114,0,0,302,303,1,0,0,
        0,303,304,4,1,0,0,304,7,1,0,0,0,305,306,5,98,0,0,306,307,5,121,0,
        0,307,308,5,116,0,0,308,309,5,101,0,0,309,310,5,115,0,0,310,9,1,
        0,0,0,311,312,5,99,0,0,312,313,5,97,0,0,313,314,5,115,0,0,314,315,
        5,101,0,0,315,11,1,0,0,0,316,317,5,99,0,0,317,318,5,97,0,0,318,319,
        5,116,0,0,319,320,5,99,0,0,320,321,5,104,0,0,321,13,1,0,0,0,322,
        323,5,99,0,0,323,324,5,104,0,0,324,325,5,97,0,0,325,326,5,114,0,
        0,326,15,1,0,0,0,327,328,5,99,0,0,328,329,5,108,0,0,329,330,5,97,
        0,0,330,331,5,115,0,0,331,332,5,115,0,0,332,333,1,0,0,0,333,334,
        4,6,1,0,334,17,1,0,0,0,335,336,5,99,0,0,336,337,5,108,0,0,337,338,
        5,111,0,0,338,339,5,115,0,0,339,340,5,117,0,0,340,341,5,114,0,0,
        341,342,5,101,0,0,342,19,1,0,0,0,343,344,5,99,0,0,344,345,5,111,
        0,0,345,346,5,110,0,0,346,347,5,115,0,0,347,348,5,116,0,0,348,21,
        1,0,0,0,349,350,5,99,0,0,350,351,5,111,0,0,351,352,5,110,0,0,352,
        353,5,116,0,0,353,354,5,105,0,0,354,355,5,110,0,0,355,356,5,117,
        0,0,356,357,5,101,0,0,357,23,1,0,0,0,358,359,5,99,0,0,359,360,5,
        111,0,0,360,361,5,114,0,0,361,362,5,111,0,0,362,363,5,117,0,0,363,
        364,5,116,0,0,364,365,5,105,0,0,365,366,5,110,0,0,366,367,5,101,
        0,0,367,368,1,0,0,0,368,369,4,10,2,0,369,25,1,0,0,0,370,371,5,100,
        0,0,371,372,5,101,0,0,372,373,5,102,0,0,373,374,5,97,0,0,374,375,
        5,117,0,0,375,376,5,108,0,0,376,377,5,116,0,0,377,27,1,0,0,0,378,
        379,5,100,0,0,379,380,5,111,0,0,380,29,1,0,0,0,381,382,5,35,0,0,
        382,383,5,101,0,0,383,384,5,99,0,0,384,385,5,104,0,0,385,386,5,111,
        0,0,386,31,1,0,0,0,387,388,5,101,0,0,388,389,5,108,0,0,389,390,5,
        115,0,0,390,391,5,101,0,0,391,33,1,0,0,0,392,393,5,101,0,0,393,394,
        5,108,0,0,394,395,5,105,0,0,395,396,5,102,0,0,396,35,1,0,0,0,397,
        398,5,101,0,0,398,399,5,110,0,0,399,400,5,100,0,0,400,401,5,105,
        0,0,401,402,5,102,0,0,402,37,1,0,0,0,403,404,5,101,0,0,404,405,5,
        110,0,0,405,406,5,117,0,0,406,407,5,109,0,0,407,39,1,0,0,0,408,409,
        5,102,0,0,409,410,5,108,0,0,410,411,5,111,0,0,411,412,5,97,0,0,412,
        413,5,116,0,0,413,41,1,0,0,0,414,415,5,102,0,0,415,416,5,111,0,0,
        416,417,5,114,0,0,417,43,1,0,0,0,418,419,5,102,0,0,419,420,5,111,
        0,0,420,421,5,114,0,0,421,422,5,101,0,0,422,423,5,97,0,0,423,424,
        5,99,0,0,424,425,5,104,0,0,425,45,1,0,0,0,426,427,5,102,0,0,427,
        428,5,117,0,0,428,429,5,110,0,0,429,430,5,99,0,0,430,431,5,116,0,
        0,431,432,5,105,0,0,432,433,5,111,0,0,433,434,5,110,0,0,434,435,
        5,115,0,0,435,47,1,0,0,0,436,437,5,102,0,0,437,438,5,117,0,0,438,
        439,5,110,0,0,439,440,5,99,0,0,440,441,5,116,0,0,441,442,5,105,0,
        0,442,443,5,111,0,0,443,444,5,110,0,0,444,49,1,0,0,0,445,446,5,35,
        0,0,446,51,1,0,0,0,447,448,5,105,0,0,448,449,5,102,0,0,449,53,1,
        0,0,0,450,451,5,105,0,0,451,452,5,102,0,0,452,453,5,100,0,0,453,
        454,5,101,0,0,454,455,5,102,0,0,455,55,1,0,0,0,456,457,5,105,0,0,
        457,458,5,102,0,0,458,459,5,110,0,0,459,460,5,100,0,0,460,461,5,
        101,0,0,461,462,5,102,0,0,462,57,1,0,0,0,463,464,5,105,0,0,464,465,
        5,110,0,0,465,59,1,0,0,0,466,467,5,105,0,0,467,468,5,110,0,0,468,
        469,5,99,0,0,469,470,5,108,0,0,470,471,5,117,0,0,471,472,5,100,0,
        0,472,473,5,101,0,0,473,61,1,0,0,0,474,475,5,105,0,0,475,476,5,110,
        0,0,476,477,5,104,0,0,477,478,5,101,0,0,478,479,5,114,0,0,479,480,
        5,105,0,0,480,481,5,116,0,0,481,63,1,0,0,0,482,483,5,105,0,0,483,
        484,5,110,0,0,484,485,5,116,0,0,485,65,1,0,0,0,486,487,5,35,0,0,
        487,488,5,108,0,0,488,489,5,105,0,0,489,490,5,110,0,0,490,491,5,
        101,0,0,491,67,1,0,0,0,492,493,5,108,0,0,493,494,5,112,0,0,494,495,
        5,99,0,0,495,496,5,116,0,0,496,497,5,121,0,0,497,498,5,112,0,0,498,
        499,5,101,0,0,499,500,1,0,0,0,500,501,4,32,3,0,501,69,1,0,0,0,502,
        503,5,108,0,0,503,504,5,119,0,0,504,505,5,111,0,0,505,506,5,98,0,
        0,506,507,5,106,0,0,507,508,5,101,0,0,508,509,5,99,0,0,509,510,5,
        116,0,0,510,71,1,0,0,0,511,512,5,109,0,0,512,513,5,97,0,0,513,514,
        5,112,0,0,514,515,5,112,0,0,515,516,5,105,0,0,516,517,5,110,0,0,
        517,518,5,103,0,0,518,73,1,0,0,0,519,520,5,109,0,0,520,521,5,105,
        0,0,521,522,5,120,0,0,522,523,5,101,0,0,523,524,5,100,0,0,524,75,
        1,0,0,0,525,526,5,111,0,0,526,527,5,98,0,0,527,528,5,106,0,0,528,
        529,5,101,0,0,529,530,5,99,0,0,530,531,5,116,0,0,531,77,1,0,0,0,
        532,533,5,112,0,0,533,534,5,114,0,0,534,535,5,97,0,0,535,536,5,103,
        0,0,536,537,5,109,0,0,537,538,5,97,0,0,538,79,1,0,0,0,539,540,5,
        113,0,0,540,541,5,117,0,0,541,542,5,111,0,0,542,543,5,116,0,0,543,
        544,5,101,0,0,544,545,5,100,0,0,545,546,5,97,0,0,546,547,5,114,0,
        0,547,548,5,114,0,0,548,549,5,97,0,0,549,550,5,121,0,0,550,551,1,
        0,0,0,551,552,4,38,4,0,552,81,1,0,0,0,553,554,5,114,0,0,554,555,
        5,101,0,0,555,556,5,116,0,0,556,557,5,117,0,0,557,558,5,114,0,0,
        558,559,5,110,0,0,559,83,1,0,0,0,560,561,5,114,0,0,561,562,5,101,
        0,0,562,563,5,102,0,0,563,564,1,0,0,0,564,565,4,40,5,0,565,85,1,
        0,0,0,566,567,5,115,0,0,567,568,5,116,0,0,568,569,5,97,0,0,569,570,
        5,116,0,0,570,571,5,117,0,0,571,572,5,115,0,0,572,573,1,0,0,0,573,
        574,4,41,6,0,574,87,1,0,0,0,575,576,5,115,0,0,576,577,5,116,0,0,
        577,578,5,114,0,0,578,579,5,117,0,0,579,580,5,99,0,0,580,581,5,116,
        0,0,581,582,5,115,0,0,582,89,1,0,0,0,583,584,5,115,0,0,584,585,5,
        116,0,0,585,586,5,114,0,0,586,587,5,117,0,0,587,588,5,99,0,0,588,
        589,5,116,0,0,589,91,1,0,0,0,590,591,5,115,0,0,591,592,5,116,0,0,
        592,593,5,114,0,0,593,594,5,105,0,0,594,595,5,110,0,0,595,596,5,
        103,0,0,596,93,1,0,0,0,597,598,5,115,0,0,598,599,5,121,0,0,599,600,
        5,109,0,0,600,601,5,98,0,0,601,602,5,111,0,0,602,603,5,108,0,0,603,
        95,1,0,0,0,604,605,5,115,0,0,605,606,5,119,0,0,606,607,5,105,0,0,
        607,608,5,116,0,0,608,609,5,99,0,0,609,610,5,104,0,0,610,97,1,0,
        0,0,611,612,5,116,0,0,612,613,5,121,0,0,613,614,5,112,0,0,614,615,
        5,101,0,0,615,616,5,100,0,0,616,617,5,101,0,0,617,618,5,102,0,0,
        618,99,1,0,0,0,619,620,5,117,0,0,620,621,5,110,0,0,621,622,5,100,
        0,0,622,623,5,101,0,0,623,624,5,102,0,0,624,101,1,0,0,0,625,626,
        5,118,0,0,626,627,5,97,0,0,627,628,5,114,0,0,628,629,5,105,0,0,629,
        630,5,97,0,0,630,631,5,98,0,0,631,632,5,108,0,0,632,633,5,101,0,
        0,633,634,5,115,0,0,634,103,1,0,0,0,635,636,5,118,0,0,636,637,5,
        105,0,0,637,638,5,114,0,0,638,639,5,116,0,0,639,640,5,117,0,0,640,
        641,5,97,0,0,641,642,5,108,0,0,642,105,1,0,0,0,643,644,5,118,0,0,
        644,645,5,111,0,0,645,646,5,105,0,0,646,647,5,100,0,0,647,107,1,
        0,0,0,648,649,5,118,0,0,649,650,5,111,0,0,650,651,5,108,0,0,651,
        652,5,97,0,0,652,653,5,116,0,0,653,654,5,105,0,0,654,655,5,108,0,
        0,655,656,5,101,0,0,656,109,1,0,0,0,657,658,5,119,0,0,658,659,5,
        104,0,0,659,660,5,105,0,0,660,661,5,108,0,0,661,662,5,101,0,0,662,
        111,1,0,0,0,663,664,5,117,0,0,664,665,5,110,0,0,665,666,5,107,0,
        0,666,667,5,110,0,0,667,668,5,111,0,0,668,669,5,119,0,0,669,670,
        5,110,0,0,670,113,1,0,0,0,671,672,5,100,0,0,672,673,5,101,0,0,673,
        674,5,112,0,0,674,675,5,114,0,0,675,676,5,101,0,0,676,677,5,99,0,
        0,677,678,5,97,0,0,678,679,5,116,0,0,679,680,5,101,0,0,680,681,5,
        100,0,0,681,115,1,0,0,0,682,683,5,112,0,0,683,684,5,114,0,0,684,
        685,5,105,0,0,685,686,5,118,0,0,686,687,5,97,0,0,687,688,5,116,0,
        0,688,689,5,101,0,0,689,117,1,0,0,0,690,691,5,112,0,0,691,692,5,
        114,0,0,692,693,5,111,0,0,693,694,5,116,0,0,694,695,5,101,0,0,695,
        696,5,99,0,0,696,697,5,116,0,0,697,698,5,101,0,0,698,699,5,100,0,
        0,699,119,1,0,0,0,700,701,5,112,0,0,701,702,5,117,0,0,702,703,5,
        98,0,0,703,704,5,108,0,0,704,705,5,105,0,0,705,706,5,99,0,0,706,
        121,1,0,0,0,707,708,5,115,0,0,708,709,5,116,0,0,709,710,5,97,0,0,
        710,711,5,116,0,0,711,712,5,105,0,0,712,713,5,99,0,0,713,123,1,0,
        0,0,714,715,5,118,0,0,715,716,5,105,0,0,716,717,5,115,0,0,717,718,
        5,105,0,0,718,719,5,98,0,0,719,720,5,108,0,0,720,721,5,101,0,0,721,
        125,1,0,0,0,722,723,5,110,0,0,723,724,5,111,0,0,724,725,5,115,0,
        0,725,726,5,104,0,0,726,727,5,97,0,0,727,728,5,100,0,0,728,729,5,
        111,0,0,729,730,5,119,0,0,730,127,1,0,0,0,731,732,5,110,0,0,732,
        733,5,111,0,0,733,734,5,115,0,0,734,735,5,97,0,0,735,736,5,118,0,
        0,736,737,5,101,0,0,737,129,1,0,0,0,738,739,5,110,0,0,739,740,5,
        111,0,0,740,741,5,109,0,0,741,742,5,97,0,0,742,743,5,115,0,0,743,
        744,5,107,0,0,744,131,1,0,0,0,745,746,5,118,0,0,746,747,5,97,0,0,
        747,748,5,114,0,0,748,749,5,97,0,0,749,750,5,114,0,0,750,751,5,103,
        0,0,751,752,5,115,0,0,752,133,1,0,0,0,753,754,5,58,0,0,754,755,5,
        58,0,0,755,135,1,0,0,0,756,757,5,43,0,0,757,137,1,0,0,0,758,759,
        5,45,0,0,759,139,1,0,0,0,760,761,5,42,0,0,761,141,1,0,0,0,762,763,
        5,47,0,0,763,143,1,0,0,0,764,765,5,37,0,0,765,145,1,0,0,0,766,767,
        5,43,0,0,767,768,5,43,0,0,768,147,1,0,0,0,769,770,5,45,0,0,770,771,
        5,45,0,0,771,149,1,0,0,0,772,773,5,60,0,0,773,774,5,60,0,0,774,151,
        1,0,0,0,775,776,5,62,0,0,776,777,5,62,0,0,777,153,1,0,0,0,778,779,
        5,60,0,0,779,155,1,0,0,0,780,781,5,62,0,0,781,157,1,0,0,0,782,783,
        5,60,0,0,783,784,5,61,0,0,784,159,1,0,0,0,785,786,5,62,0,0,786,787,
        5,61,0,0,787,161,1,0,0,0,788,789,5,61,0,0,789,790,5,61,0,0,790,163,
        1,0,0,0,791,792,5,33,0,0,792,793,5,61,0,0,793,165,1,0,0,0,794,795,
        5,38,0,0,795,167,1,0,0,0,796,797,5,124,0,0,797,169,1,0,0,0,798,799,
        5,94,0,0,799,171,1,0,0,0,800,801,5,33,0,0,801,173,1,0,0,0,802,803,
        5,126,0,0,803,175,1,0,0,0,804,805,5,38,0,0,805,806,5,38,0,0,806,
        177,1,0,0,0,807,808,5,124,0,0,808,809,5,124,0,0,809,179,1,0,0,0,
        810,811,5,63,0,0,811,181,1,0,0,0,812,813,5,58,0,0,813,183,1,0,0,
        0,814,815,5,59,0,0,815,185,1,0,0,0,816,817,5,44,0,0,817,187,1,0,
        0,0,818,819,5,46,0,0,819,820,5,46,0,0,820,821,5,46,0,0,821,189,1,
        0,0,0,822,823,5,46,0,0,823,824,5,46,0,0,824,191,1,0,0,0,825,826,
        5,46,0,0,826,193,1,0,0,0,827,828,5,61,0,0,828,195,1,0,0,0,829,830,
        5,43,0,0,830,831,5,61,0,0,831,197,1,0,0,0,832,833,5,45,0,0,833,834,
        5,61,0,0,834,199,1,0,0,0,835,836,5,42,0,0,836,837,5,61,0,0,837,201,
        1,0,0,0,838,839,5,47,0,0,839,840,5,61,0,0,840,203,1,0,0,0,841,842,
        5,37,0,0,842,843,5,61,0,0,843,205,1,0,0,0,844,845,5,124,0,0,845,
        846,5,124,0,0,846,847,5,61,0,0,847,207,1,0,0,0,848,849,5,38,0,0,
        849,850,5,38,0,0,850,851,5,61,0,0,851,209,1,0,0,0,852,853,5,38,0,
        0,853,854,5,61,0,0,854,211,1,0,0,0,855,856,5,124,0,0,856,857,5,61,
        0,0,857,213,1,0,0,0,858,859,5,94,0,0,859,860,5,61,0,0,860,215,1,
        0,0,0,861,862,5,60,0,0,862,863,5,60,0,0,863,864,5,61,0,0,864,217,
        1,0,0,0,865,866,5,62,0,0,866,867,5,62,0,0,867,868,5,61,0,0,868,219,
        1,0,0,0,869,873,5,40,0,0,870,872,7,0,0,0,871,870,1,0,0,0,872,875,
        1,0,0,0,873,871,1,0,0,0,873,874,1,0,0,0,874,876,1,0,0,0,875,873,
        1,0,0,0,876,877,5,91,0,0,877,221,1,0,0,0,878,879,5,45,0,0,879,880,
        5,62,0,0,880,223,1,0,0,0,881,882,5,40,0,0,882,225,1,0,0,0,883,884,
        5,41,0,0,884,227,1,0,0,0,885,886,5,123,0,0,886,229,1,0,0,0,887,888,
        5,125,0,0,888,231,1,0,0,0,889,890,5,91,0,0,890,233,1,0,0,0,891,892,
        5,93,0,0,892,235,1,0,0,0,893,894,5,92,0,0,894,237,1,0,0,0,895,897,
        7,1,0,0,896,895,1,0,0,0,897,239,1,0,0,0,898,905,7,2,0,0,899,901,
        5,95,0,0,900,899,1,0,0,0,900,901,1,0,0,0,901,902,1,0,0,0,902,904,
        7,2,0,0,903,900,1,0,0,0,904,907,1,0,0,0,905,903,1,0,0,0,905,906,
        1,0,0,0,906,241,1,0,0,0,907,905,1,0,0,0,908,915,7,2,0,0,909,911,
        5,95,0,0,910,909,1,0,0,0,910,911,1,0,0,0,911,912,1,0,0,0,912,914,
        7,2,0,0,913,910,1,0,0,0,914,917,1,0,0,0,915,913,1,0,0,0,915,916,
        1,0,0,0,916,918,1,0,0,0,917,915,1,0,0,0,918,920,5,46,0,0,919,921,
        7,2,0,0,920,919,1,0,0,0,921,922,1,0,0,0,922,920,1,0,0,0,922,923,
        1,0,0,0,923,933,1,0,0,0,924,926,7,3,0,0,925,927,7,4,0,0,926,925,
        1,0,0,0,926,927,1,0,0,0,927,929,1,0,0,0,928,930,7,2,0,0,929,928,
        1,0,0,0,930,931,1,0,0,0,931,929,1,0,0,0,931,932,1,0,0,0,932,934,
        1,0,0,0,933,924,1,0,0,0,933,934,1,0,0,0,934,243,1,0,0,0,935,936,
        5,48,0,0,936,938,7,5,0,0,937,939,3,238,117,0,938,937,1,0,0,0,939,
        940,1,0,0,0,940,938,1,0,0,0,940,941,1,0,0,0,941,245,1,0,0,0,942,
        944,5,64,0,0,943,945,5,64,0,0,944,943,1,0,0,0,944,945,1,0,0,0,945,
        946,1,0,0,0,946,950,7,6,0,0,947,949,7,7,0,0,948,947,1,0,0,0,949,
        952,1,0,0,0,950,948,1,0,0,0,950,951,1,0,0,0,951,953,1,0,0,0,952,
        950,1,0,0,0,953,954,6,121,0,0,954,955,4,121,7,0,955,956,1,0,0,0,
        956,957,6,121,1,0,957,247,1,0,0,0,958,959,5,34,0,0,959,960,1,0,0,
        0,960,961,6,122,2,0,961,249,1,0,0,0,962,964,5,98,0,0,963,962,1,0,
        0,0,963,964,1,0,0,0,964,965,1,0,0,0,965,969,3,248,122,0,966,968,
        3,280,138,0,967,966,1,0,0,0,968,971,1,0,0,0,969,967,1,0,0,0,969,
        970,1,0,0,0,970,972,1,0,0,0,971,969,1,0,0,0,972,973,3,282,139,0,
        973,251,1,0,0,0,974,978,5,39,0,0,975,979,8,8,0,0,976,977,5,92,0,
        0,977,979,9,0,0,0,978,975,1,0,0,0,978,976,1,0,0,0,979,980,1,0,0,
        0,980,981,5,39,0,0,981,253,1,0,0,0,982,983,5,39,0,0,983,987,7,6,
        0,0,984,986,7,7,0,0,985,984,1,0,0,0,986,989,1,0,0,0,987,985,1,0,
        0,0,987,988,1,0,0,0,988,1000,1,0,0,0,989,987,1,0,0,0,990,991,5,58,
        0,0,991,992,5,58,0,0,992,993,1,0,0,0,993,997,7,6,0,0,994,996,7,7,
        0,0,995,994,1,0,0,0,996,999,1,0,0,0,997,995,1,0,0,0,997,998,1,0,
        0,0,998,1001,1,0,0,0,999,997,1,0,0,0,1000,990,1,0,0,0,1000,1001,
        1,0,0,0,1001,255,1,0,0,0,1002,1003,5,39,0,0,1003,257,1,0,0,0,1004,
        1005,5,60,0,0,1005,1009,7,6,0,0,1006,1008,7,9,0,0,1007,1006,1,0,
        0,0,1008,1011,1,0,0,0,1009,1007,1,0,0,0,1009,1010,1,0,0,0,1010,1012,
        1,0,0,0,1011,1009,1,0,0,0,1012,1013,5,62,0,0,1013,259,1,0,0,0,1014,
        1018,7,6,0,0,1015,1017,7,7,0,0,1016,1015,1,0,0,0,1017,1020,1,0,0,
        0,1018,1016,1,0,0,0,1018,1019,1,0,0,0,1019,261,1,0,0,0,1020,1018,
        1,0,0,0,1021,1022,5,47,0,0,1022,1023,5,42,0,0,1023,1027,1,0,0,0,
        1024,1026,9,0,0,0,1025,1024,1,0,0,0,1026,1029,1,0,0,0,1027,1028,
        1,0,0,0,1027,1025,1,0,0,0,1028,1030,1,0,0,0,1029,1027,1,0,0,0,1030,
        1031,5,42,0,0,1031,1032,5,47,0,0,1032,1033,1,0,0,0,1033,1034,6,129,
        3,0,1034,263,1,0,0,0,1035,1036,5,47,0,0,1036,1037,5,47,0,0,1037,
        1041,1,0,0,0,1038,1040,9,0,0,0,1039,1038,1,0,0,0,1040,1043,1,0,0,
        0,1041,1042,1,0,0,0,1041,1039,1,0,0,0,1042,1045,1,0,0,0,1043,1041,
        1,0,0,0,1044,1046,7,10,0,0,1045,1044,1,0,0,0,1046,1047,1,0,0,0,1047,
        1048,6,130,3,0,1048,265,1,0,0,0,1049,1053,3,50,23,0,1050,1052,7,
        11,0,0,1051,1050,1,0,0,0,1052,1055,1,0,0,0,1053,1051,1,0,0,0,1053,
        1054,1,0,0,0,1054,1056,1,0,0,0,1055,1053,1,0,0,0,1056,1057,5,100,
        0,0,1057,1058,5,101,0,0,1058,1059,5,102,0,0,1059,1060,5,105,0,0,
        1060,1061,5,110,0,0,1061,1062,5,101,0,0,1062,1063,1,0,0,0,1063,1064,
        6,131,4,0,1064,267,1,0,0,0,1065,1067,7,0,0,0,1066,1065,1,0,0,0,1067,
        1068,1,0,0,0,1068,1066,1,0,0,0,1068,1069,1,0,0,0,1069,1070,1,0,0,
        0,1070,1071,6,132,5,0,1071,269,1,0,0,0,1072,1074,8,12,0,0,1073,1072,
        1,0,0,0,1074,1075,1,0,0,0,1075,1073,1,0,0,0,1075,1076,1,0,0,0,1076,
        1082,1,0,0,0,1077,1078,5,92,0,0,1078,1082,8,13,0,0,1079,1080,5,47,
        0,0,1080,1082,8,14,0,0,1081,1073,1,0,0,0,1081,1077,1,0,0,0,1081,
        1079,1,0,0,0,1082,1088,1,0,0,0,1083,1085,5,92,0,0,1084,1086,5,13,
        0,0,1085,1084,1,0,0,0,1085,1086,1,0,0,0,1086,1087,1,0,0,0,1087,1089,
        5,10,0,0,1088,1083,1,0,0,0,1088,1089,1,0,0,0,1089,1090,1,0,0,0,1090,
        1091,6,133,6,0,1091,271,1,0,0,0,1092,1094,5,92,0,0,1093,1095,5,13,
        0,0,1094,1093,1,0,0,0,1094,1095,1,0,0,0,1095,1096,1,0,0,0,1096,1097,
        5,10,0,0,1097,1098,1,0,0,0,1098,1099,6,134,6,0,1099,273,1,0,0,0,
        1100,1101,5,47,0,0,1101,1102,5,47,0,0,1102,1104,1,0,0,0,1103,1105,
        8,15,0,0,1104,1103,1,0,0,0,1105,1106,1,0,0,0,1106,1104,1,0,0,0,1106,
        1107,1,0,0,0,1107,1108,1,0,0,0,1108,1109,6,135,6,0,1109,275,1,0,
        0,0,1110,1111,5,47,0,0,1111,1112,5,42,0,0,1112,1116,1,0,0,0,1113,
        1117,8,16,0,0,1114,1115,5,42,0,0,1115,1117,8,17,0,0,1116,1113,1,
        0,0,0,1116,1114,1,0,0,0,1117,1118,1,0,0,0,1118,1119,1,0,0,0,1118,
        1116,1,0,0,0,1119,1121,1,0,0,0,1120,1122,5,42,0,0,1121,1120,1,0,
        0,0,1122,1123,1,0,0,0,1123,1121,1,0,0,0,1123,1124,1,0,0,0,1124,1125,
        1,0,0,0,1125,1126,5,47,0,0,1126,1127,1,0,0,0,1127,1128,6,136,6,0,
        1128,277,1,0,0,0,1129,1131,7,10,0,0,1130,1129,1,0,0,0,1131,1132,
        1,0,0,0,1132,1133,6,137,7,0,1133,279,1,0,0,0,1134,1139,8,18,0,0,
        1135,1139,5,10,0,0,1136,1137,5,92,0,0,1137,1139,9,0,0,0,1138,1134,
        1,0,0,0,1138,1135,1,0,0,0,1138,1136,1,0,0,0,1139,1140,1,0,0,0,1140,
        1141,6,138,6,0,1141,281,1,0,0,0,1142,1143,5,34,0,0,1143,1144,1,0,
        0,0,1144,1145,6,139,8,0,1145,283,1,0,0,0,1146,1148,8,13,0,0,1147,
        1146,1,0,0,0,1148,1149,1,0,0,0,1149,1147,1,0,0,0,1149,1150,1,0,0,
        0,1150,1151,1,0,0,0,1151,1152,4,140,8,0,1152,1153,1,0,0,0,1153,1154,
        6,140,6,0,1154,285,1,0,0,0,1155,1157,7,13,0,0,1156,1155,1,0,0,0,
        1157,1158,1,0,0,0,1158,1156,1,0,0,0,1158,1159,1,0,0,0,1159,1163,
        1,0,0,0,1160,1162,7,11,0,0,1161,1160,1,0,0,0,1162,1165,1,0,0,0,1163,
        1161,1,0,0,0,1163,1164,1,0,0,0,1164,1167,1,0,0,0,1165,1163,1,0,0,
        0,1166,1156,1,0,0,0,1167,1168,1,0,0,0,1168,1166,1,0,0,0,1168,1169,
        1,0,0,0,1169,1177,1,0,0,0,1170,1174,7,6,0,0,1171,1173,7,7,0,0,1172,
        1171,1,0,0,0,1173,1176,1,0,0,0,1174,1172,1,0,0,0,1174,1175,1,0,0,
        0,1175,1178,1,0,0,0,1176,1174,1,0,0,0,1177,1170,1,0,0,0,1178,1179,
        1,0,0,0,1179,1177,1,0,0,0,1179,1180,1,0,0,0,1180,1181,1,0,0,0,1181,
        1182,4,141,9,0,1182,1183,1,0,0,0,1183,1184,6,141,8,0,1184,287,1,
        0,0,0,1185,1187,7,0,0,0,1186,1185,1,0,0,0,1187,1188,1,0,0,0,1188,
        1186,1,0,0,0,1188,1189,1,0,0,0,1189,1190,1,0,0,0,1190,1191,6,142,
        6,0,1191,289,1,0,0,0,48,0,1,2,3,873,896,900,905,910,915,922,926,
        931,933,940,944,950,963,969,978,987,997,1000,1009,1018,1027,1041,
        1045,1053,1068,1075,1081,1085,1088,1094,1106,1116,1118,1123,1130,
        1138,1149,1158,1163,1168,1174,1179,1188,9,1,121,0,2,3,0,2,2,0,0,
        2,0,5,1,0,0,1,0,3,0,0,4,0,0,2,0,0
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!LPCLexer.__ATN) {
            LPCLexer.__ATN = new antlr.ATNDeserializer().deserialize(LPCLexer._serializedATN);
        }

        return LPCLexer.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(LPCLexer.literalNames, LPCLexer.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return LPCLexer.vocabulary;
    }

    private static readonly decisionsToDFA = LPCLexer._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}